 
 &НаКлиенте
 Перем ДрайверRFID;
  
 &НаКлиенте
 Перем ДрайверВыезд;
  
 &НаКлиенте
 Перем ИндикаторВыезд;
 
  &НаКлиенте
 Перем ДрайверВыезд2;
  
 &НаКлиенте
 Перем ИндикаторВыезд2;


  
 ////////////////////////////////////////////////////////////////////////////////////////
 // ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ ДАННЫХ
 
 &НаСервереБезКонтекста
 // Функция считывает из БД данные регистра "ргРабочееМестоДиспетчера"
 //
 //  Параметры:
 //   ТекДата    - дата
 //   ТекПолигон - справочник ссылка "ргПолигоны"
 //
 //  Возвращаемое значение:
 //   ТаблицаЗначений
 //
 Функция ПолучитьТаблицуНаДату(Полигон, Дата) 
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	РабочееМестоДиспетчераПолигона.НомерСтрокиИнтерфейса,
	 |	РабочееМестоДиспетчераПолигона.ДатаЗаезда КАК ДатаЗаезда,
	 |	РабочееМестоДиспетчераПолигона.ВидОперацииНаПолигоне,
	 |	РабочееМестоДиспетчераПолигона.Автомашина,
	 |	РабочееМестоДиспетчераПолигона.ГосударственныйНомер,
	 |	РабочееМестоДиспетчераПолигона.Водитель,
	 |	РабочееМестоДиспетчераПолигона.Контейнер,
	 |	РабочееМестоДиспетчераПолигона.Организация,
	 |	РабочееМестоДиспетчераПолигона.Контрагент,
	 |	РабочееМестоДиспетчераПолигона.АдресКонтрагента,
	 |	РабочееМестоДиспетчераПолигона.ДоговорКонтрагента,
	 |	РабочееМестоДиспетчераПолигона.ПолигонПолучатель,
	 |	РабочееМестоДиспетчераПолигона.Номенклатура,
	 |	РабочееМестоДиспетчераПолигона.ЕдиницаИзмерения,
	 |	РабочееМестоДиспетчераПолигона.Количество,
	 |	РабочееМестоДиспетчераПолигона.ВесБрутто,
	 |	РабочееМестоДиспетчераПолигона.ВесТара,
	 |	РабочееМестоДиспетчераПолигона.ВесНетто,
	 |	РабочееМестоДиспетчераПолигона.ДокументСсылка,
	 |	ВЫБОР
	 |		КОГДА НЕ ЕСТЬNULL(РабочееМестоДиспетчераПолигона.ДокументСсылка.Проведен, ЛОЖЬ)
	 |			ТОГДА ЛОЖЬ
	 |		ИНАЧЕ ИСТИНА
	 |	КОНЕЦ КАК ФлагЗаполнения,
	 |	РабочееМестоДиспетчераПолигона.ДокументСсылка.Номер КАК НомерДокумента,
	 |	РабочееМестоДиспетчераПолигона.Талон,
	 |	РабочееМестоДиспетчераПолигона.Талон.Номер КАК НомерТалона,
	 |	РабочееМестоДиспетчераПолигона.Коэффициент,
	 |	РабочееМестоДиспетчераПолигона.ЭлектроннаяКарта,
	 |	РабочееМестоДиспетчераПолигона.Объем,
	 |	РабочееМестоДиспетчераПолигона.ДокументСсылка.Обработан КАК ФлагОбработки,
	 |	РабочееМестоДиспетчераПолигона.ВесДо,
	 |	РабочееМестоДиспетчераПолигона.ВесПосле,
	 |	РабочееМестоДиспетчераПолигона.ВесПоВесам
	 |ИЗ
	 |	РегистрСведений.ргРабочееМестоДиспетчераПолигона КАК РабочееМестоДиспетчераПолигона
	 |ГДЕ
	 |	РабочееМестоДиспетчераПолигона.Полигон = &Полигон
	 |	И РабочееМестоДиспетчераПолигона.Дата = &Дата
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	ДатаЗаезда";
	 
	 Запрос.УстановитьПараметр("Полигон",	Полигон);
	 Запрос.УстановитьПараметр("Дата",		Дата);
	 
	 Возврат Запрос.Выполнить().Выгрузить();
	 
 КонецФункции
 
 ////////////////////////////////////////////////////////////////////////////////////////
 // ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
 
 &НаСервере
 // Процедура обновляет ТЧ "ТаблицаДанных"
 //
 Процедура ВосстановитьДанныеНаДату()
	 
	 Таблица = ПолучитьТаблицуНаДату(Объект.Полигон, Объект.Дата);
	 
	 Объект.ТаблицаДанных.Загрузить(Таблица);
	 
	 ТаблицаОтходов = ПолучитьТаблицуОтходовНаДату(Объект.Полигон, Объект.Дата);
	 Объект.ТаблицаОтходов.Загрузить(ТаблицаОтходов);
	 
	 Если Таблица.Количество() > 0 Тогда
		 Таблица.Сортировать("НомерСтрокиИнтерфейса УБЫВ");
		 мМаксимальныйНомер = Таблица[0].НомерСтрокиИнтерфейса;
	 КонецЕсли;	
	 
	 мИДТекСтрокиТаблицыДанных = Неопределено;
	 
 КонецПроцедуры
 
 &НаКлиенте
 // Процедура добавляет новую строку ТЧ "ТаблицаДанных"
 //
 //  Параметры:
 //   Вставить - булево
 //
 Процедура ДобавитьНовуюСтроку(СтруктураТалона = Неопределено)
	 
	 НоваяСтрока = Объект.ТаблицаДанных.Добавить();
	 
	 НоваяСтрока.ВидОперацииНаПолигоне	= ПредопределенноеЗначение("Перечисление.ргВидыОперацийНаПолигоне.ПриемОтходов");
	 НоваяСтрока.Организация				= мОрганизация;
	 Если СтруктураТалона=Неопределено Тогда 
		 НоваяСтрока.Контрагент				= мКонтрагент;
		 НоваяСтрока.ДоговорКонтрагента		= мДоговор;
	 Иначе
		 НоваяСтрока.Контрагент				= СтруктураТалона.Контрагент;
		 НоваяСтрока.ДоговорКонтрагента		= СтруктураТалона.Договор;		
	 КонецЕсли;
	 
	 НоваяСтрока.Количество				= 1;
	 НоваяСтрока.ФлагИзменений			= Истина;
	 НоваяСтрока.НомерСтрокиИнтерфейса	= мМаксимальныйНомер + 1; 
	 НоваяСтрока.ДатаЗаезда				= ?(Объект.Дата = НачалоДня(ТекущаяДата()), ТекущаяДата(), Объект.Дата);
	 
	 Элементы.ТаблицаДанных.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	 
	 мМаксимальныйНомер = мМаксимальныйНомер + 1;
	 
 КонецПроцедуры
 
 &НаКлиенте
 // Процедура выполняет необходимые действия при изменении вида операции
 //
 Процедура ОперацииПриИзмененииВидаОперации()
	 
	 ТекСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
	 Если ТекСтрока.ВидОперацииНаПолигоне = ПараметрыВывозМусораПроф.ВидыОперацийНаПолигонеВвозМусора Тогда
		 
		 Элементы.ПолигонПолучатель.ТолькоПросмотр = Истина;
		 
		 ТекСтрока.ПолигонПолучатель = Неопределено;
		 Если ТипЗнч(ТекСтрока.Водитель) <> Тип("СправочникСсылка.Сотрудники") Тогда
			 ТекСтрока.Водитель = ПараметрыВывозМусораПроф.СотрудникПустаяСсылка;
		 КонецЕсли;
		 
	 ИначеЕсли ТекСтрока.ВидОперацииНаПолигоне = ПараметрыВывозМусораПроф.ВидыОперацийНаПолигонеПриемОтходов ИЛИ
		 ТекСтрока.ВидОперацииНаПолигоне = ПараметрыВывозМусораПроф.ВидыОперацийНаПолигонеПриемПоТалонам ИЛИ
		 ТекСтрока.ВидОперацииНаПолигоне = ПараметрыВывозМусораПроф.ВидыОперацийНаПолигонеПриемЗаНаличку Тогда
		 
		 Элементы.ПолигонПолучатель.ТолькоПросмотр = Истина;
		 
		 ТекСтрока.ПолигонПолучатель = Неопределено;
		 Если ТипЗнч(ТекСтрока.Водитель) <> Тип("СправочникСсылка.ФизическиеЛица") Тогда
			 ТекСтрока.Водитель = ПараметрыВывозМусораПроф.ФизЛицоПустаяСсылка;
		 КонецЕсли;
		 
		 Если ТекСтрока.ВидОперацииНаПолигоне = ПараметрыВывозМусораПроф.ВидыОперацийНаПолигонеПриемЗаНаличку Тогда
			 
			 ТекСтрока.Контрагент			= ПредопределенноеЗначение("Справочник.Контрагенты.ргФизЛицо");
			 ТекСтрока.Контрагент			= СКоПФизЛицо;
			 
			 СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(ТекСтрока.Контрагент);
			 
			 ТекСтрока.ДоговорКонтрагента	= СтруктураДанные.Договор;
			 ТекСтрока.Организация			= СтруктураДанные.Организация;
			 
		 КонецЕсли;
		 
	 ИначеЕсли ТекСтрока.ВидОперацииНаПолигоне = ПараметрыВывозМусораПроф.ВидыОперацийНаПолигонеВывозМусора Тогда
		 
		 Элементы.ПолигонПолучатель.ТолькоПросмотр = Ложь;
		 
		 Если ТипЗнч(ТекСтрока.Водитель) <> Тип("СправочникСсылка.Сотрудники") Тогда
			 ТекСтрока.Водитель = ПараметрыВывозМусораПроф.СотрудникПустаяСсылка;
		 КонецЕсли;
		 
	 ИначеЕсли ТекСтрока.ВидОперацииНаПолигоне = ПараметрыВывозМусораПроф.ВидыОперацийНаПолигонеУтилизацияОтходов Тогда
		 
		 Элементы.ПолигонПолучатель.ТолькоПросмотр = Ложь;
		 
		 Если ТипЗнч(ТекСтрока.Водитель) <> Тип("СправочникСсылка.ФизическиеЛица") Тогда
			 ТекСтрока.Водитель = ПараметрыВывозМусораПроф.ФизЛицоПустаяСсылка;
		 КонецЕсли;
		 
	 КонецЕсли;	
	 
 КонецПроцедуры
 
 &НаКлиенте
 // Процедура выполняет необходимые действия при изменении вида операции
 //
 Функция ПолучитьСтруктуруТекущейСтроки(ТекСтрока)
	 
	 СтруктураСтроки = Новый Структура;
	 
	 СтруктураСтроки.Вставить("Дата",					Объект.Дата);
	 СтруктураСтроки.Вставить("Полигон",					Объект.Полигон);
	 СтруктураСтроки.Вставить("ДатаЗаезда",				ТекСтрока.ДатаЗаезда);
	 СтруктураСтроки.Вставить("Автомашина",				ТекСтрока.Автомашина);
	 СтруктураСтроки.Вставить("ВесДо",					ТекСтрока.ВесДо);
	 СтруктураСтроки.Вставить("ВесПосле",				ТекСтрока.ВесПосле);
	 СтруктураСтроки.Вставить("ВесПоВесам",				ТекСтрока.ВесПоВесам);
	 СтруктураСтроки.Вставить("ГосударственныйНомер",	ТекСтрока.ГосударственныйНомер);
	 СтруктураСтроки.Вставить("Объем",					ТекСтрока.Объем);
	 СтруктураСтроки.Вставить("ВесБрутто",				ТекСтрока.ВесБрутто);
	 СтруктураСтроки.Вставить("ВесТара",					ТекСтрока.ВесТара);
	 СтруктураСтроки.Вставить("ВесНетто",				ТекСтрока.ВесНетто);
	 СтруктураСтроки.Вставить("ВидОперацииНаПолигоне",	ТекСтрока.ВидОперацииНаПолигоне);
	 СтруктураСтроки.Вставить("Водитель",				ТекСтрока.Водитель);
	 СтруктураСтроки.Вставить("ДоговорКонтрагента",		ТекСтрока.ДоговорКонтрагента);
	 СтруктураСтроки.Вставить("ЭлектроннаяКарта",		ТекСтрока.ЭлектроннаяКарта);
	 СтруктураСтроки.Вставить("ДокументСсылка",			ТекСтрока.ДокументСсылка);
	 СтруктураСтроки.Вставить("НомерДокумента",			ТекСтрока.НомерДокумента);
	 СтруктураСтроки.Вставить("ЕдиницаИзмерения",		ТекСтрока.ЕдиницаИзмерения);
	 СтруктураСтроки.Вставить("Количество",				ТекСтрока.Количество);
	 СтруктураСтроки.Вставить("Коэффициент",				ТекСтрока.Коэффициент);
	 СтруктураСтроки.Вставить("Контейнер",				ТекСтрока.Контейнер);
	 СтруктураСтроки.Вставить("Контрагент",				ТекСтрока.Контрагент);
	 СтруктураСтроки.Вставить("АдресКонтрагента",		ТекСтрока.АдресКонтрагента);
	 СтруктураСтроки.Вставить("Номенклатура",			ТекСтрока.Номенклатура);
	 СтруктураСтроки.Вставить("НомерСтрокиИнтерфейса",	ТекСтрока.НомерСтрокиИнтерфейса);
	 СтруктураСтроки.Вставить("Организация",				ТекСтрока.Организация);
	 СтруктураСтроки.Вставить("ПолигонПолучатель",		ТекСтрока.ПолигонПолучатель);
	 СтруктураСтроки.Вставить("Талон",					ТекСтрока.Талон);
	 СтруктураСтроки.Вставить("НомерТалона",				ТекСтрока.НомерТалона);
	 СтруктураСтроки.Вставить("ФлагИзменений",			ТекСтрока.ФлагИзменений);
	 СтруктураСтроки.Вставить("ФлагОбработки",			ТекСтрока.ФлагОбработки);
	 СтруктураСтроки.Вставить("ФлагЗаполнения",			Истина);
	 СтруктураСтроки.Вставить("ЕстьОшибки",				Ложь);
	 
	 Возврат СтруктураСтроки;
	 
 КонецФункции
 
 &НаСервере
 Функция ЭтоНашИНН(Контрагент_)
	 Если Найти(Контрагент_.ИНН,"2223592509") Тогда 
		 Возврат Истина;
	 Иначе
		 Возврат Ложь;
	 КонецЕсли;
	 
 КонецФункции
 
	 
 &НаКлиенте
 // Процедура запускает сервисные механизмы записи данных
 //
 Процедура СохранитьДанные(Скан = Ложь, Отказ=Ложь)
	 
	 Если мТекИДСтроки = Неопределено Тогда
		 Возврат;
	 КонецЕсли;
	 
	 ТекСтрока = Объект.ТаблицаДанных.НайтиПоИдентификатору(мТекИДСтроки);
	 Если ТекСтрока = Неопределено Тогда
		 Возврат;
	 КонецЕсли;
	 
	 Если ТекСтрока.ФлагИзменений Тогда
		 
		 // Преобразуем текущие данные в структуру
		 СтруктураСтроки 	= ПолучитьСтруктуруТекущейСтроки(ТекСтрока);
		 МассивСтрокОтходы	= ПолучитьМассивСтрокОтходов(ТекСтрока);
		 
		 Отказ = ПроверитьТалоны(МассивСтрокОтходы);
		 Если Отказ Тогда 
			 Предупреждение("Разные конрагенты", 9);
			 Возврат;
		 КонецЕсли;
		 
		 КартаНужна = Истина;
		 Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
			 Если ЭтоНашИНН(ТекСтрока.Контрагент) Тогда 
				 КартаНужна = Ложь;		 
			 КонецЕсли;
		 КонецЕсли;
		 
		 
		 Если КартаНужна=Истина и ДрайверRFID <> Неопределено И ЗначениеЗаполнено(ТекСтрока.ЭлектроннаяКарта) и Скан=Ложь Тогда
			 СохранитьДанныеПриемаВКомпоненте(ТекСтрока);
		 КонецЕсли;
		 
		 
		 // Выполняем необходимые действия сохранения в документе
		 СохранитьДанныеСтрокиВДокумент(СтруктураСтроки, МассивСтрокОтходы);
		 
		 // Выполняем необходимые действия сохранения в регистре
		 СохранитьДанныеСтрокиВРегистр(СтруктураСтроки, МассивСтрокОтходы);
		 
		 // Заполняем текущую строку данными
		 ТекСтрока.ДокументСсылка	= СтруктураСтроки.ДокументСсылка;
		 ТекСтрока.НомерДокумента	= СтруктураСтроки.НомерДокумента;
		 ТекСтрока.ФлагЗаполнения	= СтруктураСтроки.ФлагЗаполнения;
		 ТекСтрока.ФлагИзменений		= Ложь;
		 
	 КонецЕсли;	
	 
 КонецПроцедуры
 
 &НаКлиенте
 // Процедура запускает сервисные механизмы записи данных
 //
 Процедура СохранитьДанныеПредварительно(Скан = Ложь, Отказ=Ложь)
	 
	 Если мТекИДСтроки = Неопределено Тогда
		 Возврат;
	 КонецЕсли;
	 
	 ТекСтрока = Объект.ТаблицаДанных.НайтиПоИдентификатору(мТекИДСтроки);
	 Если ТекСтрока = Неопределено Тогда
		 Возврат;
	 КонецЕсли;
	 
	 Если ТекСтрока.ФлагИзменений Тогда
		 
		 // Преобразуем текущие данные в структуру
		 СтруктураСтроки 	= ПолучитьСтруктуруТекущейСтроки(ТекСтрока);
		 МассивСтрокОтходы	= ПолучитьМассивСтрокОтходов(ТекСтрока);
		 
		 Отказ = ПроверитьТалоны(МассивСтрокОтходы);
		 Если Отказ Тогда 
			 Предупреждение("Разные конрагенты", 9);
			 Возврат;
		 КонецЕсли;
		 
		 КартаНужна = Истина;
		 Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
			 Если ЭтоНашИНН(ТекСтрока.Контрагент) Тогда 
				 КартаНужна = Ложь;		 
			 КонецЕсли;
		 КонецЕсли;
		 
		 
		 //Если КартаНужна=Истина и мКомпонента <> Неопределено И ЗначениеЗаполнено(ТекСтрока.ЭлектроннаяКарта) и Скан=Ложь Тогда
		 //    СохранитьДанныеПриемаВКомпоненте(ТекСтрока);
		 //КонецЕсли;
		 
		 
		 //// Выполняем необходимые действия сохранения в документе
		 //СохранитьДанныеСтрокиВДокумент(СтруктураСтроки, МассивСтрокОтходы);
		 
		 // Выполняем необходимые действия сохранения в регистре
		 СохранитьДанныеСтрокиВРегистр(СтруктураСтроки, МассивСтрокОтходы);
		 
		 // Заполняем текущую строку данными
		 //ТекСтрока.ДокументСсылка	= СтруктураСтроки.ДокументСсылка;
		 ТекСтрока.НомерДокумента	= СтруктураСтроки.НомерДокумента;
		 ТекСтрока.ФлагЗаполнения	= СтруктураСтроки.ФлагЗаполнения;
		 ТекСтрока.ФлагИзменений		= Ложь;
		 
	 КонецЕсли;	
	 
 КонецПроцедуры
 

 &НаСервереБезКонтекста
 // Процедура добавляет необходимые записи в документах
 //
 //  Параметры:
 //   ТекСтрока - строка ТЧ "ТаблицаДанных"
 //
 Процедура СохранитьДанныеСтрокиВДокумент(ТекСтрока, МассивСтрокОтходы)
	 
	 Если Не ЗначениеЗаполнено(ТекСтрока.ВидОперацииНаПолигоне) Или Не ЗначениеЗаполнено(ТекСтрока.Автомашина) Тогда
		 ТекСтрока.Вставить("ФлагЗаполнения", Ложь);
		 Возврат;
	 КонецЕсли;	 
	 
	 Если ТекСтрока.ВидОперацииНаПолигоне = Перечисления.ргВидыОперацийНаПолигоне.ВвозМусора Тогда
		 
		 Если ЗначениеЗаполнено(ТекСтрока.ДокументСсылка) Тогда
			 ДокОбъект = ТекСтрока.ДокументСсылка.ПолучитьОбъект();
			 
			 МассивДляУдаления = ДокОбъект.Захоронение.НайтиСтроки(Новый Структура("НомерСтрокиИнтерфейсаПолигона", ТекСтрока.НомерСтрокиИнтерфейса));
			 Для Каждого СтрокаДляУдаления Из МассивДляУдаления Цикл
				 ДокОбъект.Захоронение.Удалить(СтрокаДляУдаления);
			 КонецЦикла;
		 Иначе
			 ДокСсылка = ргМодульВывозМусораСервер.ПолучитьПутевойЛистПоАвтомашине(ТекСтрока.ДатаЗаезда, ТекСтрока.Автомашина, Неопределено, Справочники.ргСмены.ПерваяСмена);
			 Если ДокСсылка.Пустая() Тогда
				 
				 ДокОбъект = Документы.ргПутевойЛист.СоздатьДокумент();
				 
				 ДокОбъект.Дата								= НачалоДня(ТекСтрока.ДатаЗаезда) + 8*60*60;
				 ДокОбъект.ВидОперации 						= ?(ТекСтрока.Автомашина.НашаАвтомашина, Перечисления.ргВидыОперацийПутевойЛист.Рабочий, Перечисления.ргВидыОперацийПутевойЛист.Сторонний);
				 ДокОбъект.Организация						= ТекСтрока.Организация;
				 ДокОбъект.Автомашина						= ТекСтрока.Автомашина;
				 ДокОбъект.ГосударственныйНомер				= ТекСтрока.Автомашина.ГосударственныйНомер;
				 ДокОбъект.Водитель							= ТекСтрока.Водитель;
				 ДокОбъект.НомерВодительскогоУдостоверения	= ТекСтрока.Водитель.ргНомерВодительскогоУдостоверения;
				 ДокОбъект.ДатаВыездаИзГаража				= ТекСтрока.Дата;
				 ДокОбъект.ДатаВозвращенияВГараж				= ТекСтрока.Дата;
				 ДокОбъект.ВремяВыездаИзГаража				= Справочники.ргСмены.ПерваяСмена.ВремяНачалаСмены;
				 ДокОбъект.ВремяВозвращенияВГараж			= Справочники.ргСмены.ПерваяСмена.ВремяКонцаСмены;
				 ДокОбъект.Ответственный						= УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойОтветственный");
				 ДокОбъект.Автор								= Пользователи.ТекущийПользователь();
				 ДокОбъект.ТипАвтомашины						= ТекСтрока.Автомашина.ТипАвтомашины;
				 ДокОбъект.Смена								= Справочники.ргСмены.ПерваяСмена;
				 ДокОбъект.КоэффициентСмены					= Справочники.ргСмены.ПерваяСмена.КоэффициентСмены;
				 ДокОбъект.Обработан							= Истина;
				 ДокОбъект.ВидТарифаЗарплаты					= ТекСтрока.Автомашина.ВидТарифаЗарплаты;
				 
				 ДокОбъект.УстановитьНовыйНомер();
				 
			 Иначе
				 ДокОбъект = ДокСсылка.ПолучитьОбъект();
			 КонецЕсли;	
			 
		 КонецЕсли;
		 
		 ДокОбъект.ДополнительныеСвойства.мНеобходимКонтрольОбработки		= Ложь;
		 ДокОбъект.ДополнительныеСвойства.мНеобходимРасчетИтогаПоВыручке		= Ложь;
		 ДокОбъект.ДополнительныеСвойства.мНеобходимРасчетИтогаПоЗарплате	= Ложь;
		 
		 Для Каждого Строка Из МассивСтрокОтходы Цикл
			 
			 СтрокаЗахоронения = ДокОбъект.Захоронение.Добавить();
			 
			 СтрокаЗахоронения.ДатаЗаезда					= ТекСтрока.ДатаЗаезда;
			 СтрокаЗахоронения.ВидОперацииНаПолигоне			= ТекСтрока.ВидОперацииНаПолигоне;
			 СтрокаЗахоронения.ЭлектроннаяКарта				= ТекСтрока.ЭлектроннаяКарта;
			 СтрокаЗахоронения.Контрагент					= ТекСтрока.Контрагент;
			 СтрокаЗахоронения.ДоговорКонтрагента			= ТекСтрока.ДоговорКонтрагента;
			 СтрокаЗахоронения.ОтражатьВБухгалтерскомУчете	= ТекСтрока.ДоговорКонтрагента.ргОтражатьВБухгалтерскомУчете;
			 СтрокаЗахоронения.Полигон						= ТекСтрока.Полигон;
			 СтрокаЗахоронения.Вес							= ТекСтрока.ВесНетто;
			 СтрокаЗахоронения.Контейнер						= ТекСтрока.Контейнер;
			 СтрокаЗахоронения.НомерСтрокиИнтерфейсаПолигона	= ТекСтрока.НомерСтрокиИнтерфейса;
			 
			 ЦенаСтроки = 0;
			 Если ЗначениеЗаполнено(ТекСтрока.ДоговорКонтрагента.ВидЦен) Тогда
				 
				 СуммаВключаетНДС = ?(ЗначениеЗаполнено(ТекСтрока.ДоговорКонтрагента.ВидЦен), ТекСтрока.ДоговорКонтрагента.ВидЦен.ЦенаВключаетНДС, Истина);
				 
				 СтруктураДанных = Новый Структура;
				 СтруктураДанных.Вставить("ВидЦен",				ТекСтрока.ДоговорКонтрагента.ВидЦен);
				 СтруктураДанных.Вставить("СуммаВключаетНДС",	СуммаВключаетНДС);
				 СтруктураДанных.Вставить("ДатаОбработки",		ДокОбъект.Дата);
				 СтруктураДанных.Вставить("Номенклатура",		Строка.Номенклатура);
				 СтруктураДанных.Вставить("Характеристика",		Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
				 СтруктураДанных.Вставить("Коэффициент",			Строка.Коэффициент);
				 СтруктураДанных.Вставить("ВалютаДокумента",		ДокОбъект.ДоговорКонтрагента.ВалютаРасчетов);
				 
				 ЦенаСтроки = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанных);
				 
			 КонецЕсли;
			 
			 СтрокаЗахоронения.Номенклатура		= Строка.Номенклатура;
			 СтрокаЗахоронения.СтавкаНДС			= Строка.Номенклатура.СтавкаНДС;
			 СтрокаЗахоронения.ЕдиницаИзмерения	= Строка.ЕдиницаИзмерения;
			 СтрокаЗахоронения.Коэффициент		= Строка.Коэффициент;
			 СтрокаЗахоронения.Количество		= Строка.Количество;
			 СтрокаЗахоронения.Талон				= Строка.Талон;
			 СтрокаЗахоронения.Цена				= ЦенаСтроки;
			 СтрокаЗахоронения.Сумма				= ЦенаСтроки * Строка.Количество;
			 СтрокаЗахоронения.СтавкаНДС			= Строка.Номенклатура.СтавкаНДС;
			 СтрокаЗахоронения.СуммаНДС			= ргМодульВывозМусораСервер.РассчитатьСуммуНДС(СтрокаЗахоронения.Сумма, СуммаВключаетНДС, СтрокаЗахоронения.СтавкаНДС);
			 СтрокаЗахоронения.Всего				= СтрокаЗахоронения.Сумма + ?(СуммаВключаетНДС, 0, СтрокаЗахоронения.СуммаНДС);
			 
		 КонецЦикла;
		 
		 // Запись путевого листа
		 Попытка
			 ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		 Исключение
			 ТекстСообщения = "Строка № " + ТекСтрока.НомерСтроки + " не сохранена!" + Символы.ПС + "по причине: " + ОписаниеОшибки();
			 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			 ТекСтрока.Вставить("ЕстьОшибки",		Истина);
			 ТекСтрока.Вставить("ФлагЗаполнения",	Ложь);
		 КонецПопытки;	
		 
		 // Проведение путевого листа
		 Если Не ТекСтрока.ЕстьОшибки Тогда
			 ТекСтрока.Вставить("ДокументСсылка",	ДокОбъект.Ссылка);
			 ТекСтрока.Вставить("НомерДокумента",	ДокОбъект.Номер);
			 Если ДокОбъект.ПроверитьЗаполнение() Тогда
				 Попытка
					 ДокОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				 Исключение
					 ТекСтрока.Вставить("ЕстьОшибки",		Истина);
					 ТекСтрока.Вставить("ФлагЗаполнения",	Ложь);
				 КонецПопытки;
			 Иначе
				 ТекСтрока.Вставить("ЕстьОшибки",		Истина);
				 ТекСтрока.Вставить("ФлагЗаполнения",	Ложь);
			 КонецЕсли;
		 КонецЕсли;
		 
	 ИначеЕсли ТекСтрока.ВидОперацииНаПолигоне = Перечисления.ргВидыОперацийНаПолигоне.ВывозМусора Тогда
		 
		 Если ЗначениеЗаполнено(ТекСтрока.ДокументСсылка) Тогда
			 ДокОбъект = ТекСтрока.ДокументСсылка.ПолучитьОбъект();
			 
			 МассивДляУдаления = ДокОбъект.Захоронение.НайтиСтроки(Новый Структура("НомерСтрокиИнтерфейсаПолигона", ТекСтрока.НомерСтрокиИнтерфейса));
			 Для Каждого СтрокаДляУдаления Из МассивДляУдаления Цикл
				 ДокОбъект.Захоронение.Удалить(СтрокаДляУдаления);
			 КонецЦикла;
		 Иначе
			 ДокСсылка = ргМодульВывозМусораСервер.ПолучитьПутевойЛистПоАвтомашине(ТекСтрока.ДатаЗаезда, ТекСтрока.Автомашина, Неопределено, Справочники.ргСмены.ПерваяСмена);
			 Если ДокСсылка.Пустая() Тогда
				 
				 ДокОбъект = Документы.ргПутевойЛист.СоздатьДокумент();
				 
				 ДокОбъект.Дата								= НачалоДня(ТекСтрока.ДатаЗаезда) + 8*60*60;
				 ДокОбъект.ВидОперации 						= ?(ТекСтрока.Автомашина.НашаАвтомашина, Перечисления.ргВидыОперацийПутевойЛист.Рабочий, Перечисления.ргВидыОперацийПутевойЛист.Сторонний);
				 ДокОбъект.Организация						= ТекСтрока.Организация;
				 ДокОбъект.Автомашина						= ТекСтрока.Автомашина;
				 ДокОбъект.ГосударственныйНомер				= ТекСтрока.Автомашина.ГосударственныйНомер;
				 ДокОбъект.Водитель							= ТекСтрока.Водитель;
				 ДокОбъект.НомерВодительскогоУдостоверения	= ТекСтрока.Водитель.ргНомерВодительскогоУдостоверения;
				 ДокОбъект.ДатаВыездаИзГаража				= ТекСтрока.ДатаЗаезда;
				 ДокОбъект.ДатаВозвращенияВГараж				= ТекСтрока.ДатаЗаезда;
				 ДокОбъект.ВремяВыездаИзГаража				= Справочники.ргСмены.ПерваяСмена.ВремяНачалаСмены;
				 ДокОбъект.ВремяВозвращенияВГараж			= Справочники.ргСмены.ПерваяСмена.ВремяКонцаСмены;
				 ДокОбъект.Ответственный						= УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойОтветственный");
				 ДокОбъект.Автор								= Пользователи.ТекущийПользователь();
				 ДокОбъект.ТипАвтомашины						= ТекСтрока.Автомашина.ТипАвтомашины;
				 ДокОбъект.Смена								= Справочники.ргСмены.ПерваяСмена;
				 ДокОбъект.КоэффициентСмены					= Справочники.ргСмены.ПерваяСмена.КоэффициентСмены;
				 ДокОбъект.Обработан							= Истина;
				 ДокОбъект.ВидТарифаЗарплаты					= ТекСтрока.Автомашина.ВидТарифаЗарплаты;
				 
				 ДокОбъект.УстановитьНовыйНомер();
				 
			 Иначе
				 ДокОбъект = ДокСсылка.ПолучитьОбъект();
			 КонецЕсли;	
			 
		 КонецЕсли;
		 
		 ДокОбъект.ДополнительныеСвойства.мНеобходимКонтрольОбработки		= Ложь;
		 ДокОбъект.ДополнительныеСвойства.мНеобходимРасчетИтогаПоВыручке		= Ложь;
		 ДокОбъект.ДополнительныеСвойства.мНеобходимРасчетИтогаПоЗарплате	= Ложь;
		 
		 Для Каждого Строка Из МассивСтрокОтходы Цикл
			 
			 СтрокаЗахоронения = ДокОбъект.Захоронение.Добавить();
			 
			 СтрокаЗахоронения.ДатаЗаезда					= ТекСтрока.ДатаЗаезда;
			 СтрокаЗахоронения.ВидОперацииНаПолигоне			= ТекСтрока.ВидОперацииНаПолигоне;
			 СтрокаЗахоронения.ЭлектроннаяКарта				= ТекСтрока.ЭлектроннаяКарта;
			 СтрокаЗахоронения.Контрагент					= ТекСтрока.Контрагент;
			 СтрокаЗахоронения.ДоговорКонтрагента			= ТекСтрока.ДоговорКонтрагента;
			 СтрокаЗахоронения.ОтражатьВБухгалтерскомУчете	= ТекСтрока.ДоговорКонтрагента.ргОтражатьВБухгалтерскомУчете;
			 СтрокаЗахоронения.Полигон						= ТекСтрока.ПолигонПолучатель;
			 СтрокаЗахоронения.ПолигонОтправитель			= ТекСтрока.Полигон;
			 СтрокаЗахоронения.Вес							= ТекСтрока.ВесНетто;
			 СтрокаЗахоронения.Контейнер						= ТекСтрока.Контейнер;
			 СтрокаЗахоронения.НомерСтрокиИнтерфейсаПолигона	= ТекСтрока.НомерСтрокиИнтерфейса;
			 
			 ЦенаСтроки = 0;
			 Если ЗначениеЗаполнено(ТекСтрока.ДоговорКонтрагента.ВидЦен) Тогда
				 
				 СуммаВключаетНДС = ?(ЗначениеЗаполнено(ТекСтрока.ДоговорКонтрагента.ВидЦен), ТекСтрока.ДоговорКонтрагента.ВидЦен.ЦенаВключаетНДС, Истина);
				 
				 СтруктураДанных = Новый Структура;
				 СтруктураДанных.Вставить("ВидЦен",				ТекСтрока.ДоговорКонтрагента.ВидЦен);
				 СтруктураДанных.Вставить("СуммаВключаетНДС",	СуммаВключаетНДС);
				 СтруктураДанных.Вставить("ДатаОбработки",		ДокОбъект.Дата);
				 СтруктураДанных.Вставить("Номенклатура",		Строка.Номенклатура);
				 СтруктураДанных.Вставить("Характеристика",		Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
				 СтруктураДанных.Вставить("Коэффициент",			Строка.Коэффициент);
				 СтруктураДанных.Вставить("ВалютаДокумента",		ДокОбъект.ДоговорКонтрагента.ВалютаРасчетов);
				 
				 ЦенаСтроки = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанных);
				 
			 КонецЕсли;
			 
			 СтрокаЗахоронения.Номенклатура		= Строка.Номенклатура;
			 СтрокаЗахоронения.СтавкаНДС			= Строка.Номенклатура.СтавкаНДС;
			 СтрокаЗахоронения.ЕдиницаИзмерения	= Строка.ЕдиницаИзмерения;
			 СтрокаЗахоронения.Коэффициент		= Строка.Коэффициент;
			 СтрокаЗахоронения.Количество		= Строка.Количество;
			 СтрокаЗахоронения.Талон				= Строка.Талон;
			 СтрокаЗахоронения.Цена				= ЦенаСтроки;
			 СтрокаЗахоронения.Сумма				= ЦенаСтроки * Строка.Количество;
			 СтрокаЗахоронения.СтавкаНДС			= Строка.Номенклатура.СтавкаНДС;
			 СтрокаЗахоронения.СуммаНДС			= ргМодульВывозМусораСервер.РассчитатьСуммуНДС(СтрокаЗахоронения.Сумма, СуммаВключаетНДС, СтрокаЗахоронения.СтавкаНДС);
			 СтрокаЗахоронения.Всего				= СтрокаЗахоронения.Сумма + ?(СуммаВключаетНДС, 0, СтрокаЗахоронения.СуммаНДС);
			 
		 КонецЦикла;
		 
		 // Запись путевого листа
		 Попытка
			 ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		 Исключение
			 ТекстСообщения = "Строка № " + ТекСтрока.НомерСтроки + " не сохранена!" + Символы.ПС + "по причине: " + ОписаниеОшибки();
			 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			 ТекСтрока.Вставить("ЕстьОшибки",		Истина);
			 ТекСтрока.Вставить("ФлагЗаполнения",	Ложь);
		 КонецПопытки;	
		 
		 // Проведение путевого листа
		 Если Не ТекСтрока.ЕстьОшибки Тогда
			 ТекСтрока.Вставить("ДокументСсылка",	ДокОбъект.Ссылка);
			 ТекСтрока.Вставить("НомерДокумента",	ДокОбъект.Номер);
			 Если ДокОбъект.ПроверитьЗаполнение() Тогда
				 Попытка
					 ДокОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				 Исключение
					 ТекСтрока.Вставить("ЕстьОшибки",		Истина);
					 ТекСтрока.Вставить("ФлагЗаполнения",	Ложь);
				 КонецПопытки;
			 Иначе
				 ТекСтрока.Вставить("ЕстьОшибки",		Истина);
				 ТекСтрока.Вставить("ФлагЗаполнения",	Ложь);
			 КонецЕсли;
		 КонецЕсли;
		 
	 ИначеЕсли ТекСтрока.ВидОперацииНаПолигоне = Перечисления.ргВидыОперацийНаПолигоне.ПриемОтходов Или
		 ТекСтрока.ВидОперацииНаПолигоне = Перечисления.ргВидыОперацийНаПолигоне.ПриемПоТалонам Или
		 ТекСтрока.ВидОперацииНаПолигоне = Перечисления.ргВидыОперацийНаПолигоне.ПриемЗаНаличку Тогда	
		 
		 Если ЗначениеЗаполнено(ТекСтрока.ДокументСсылка) Тогда
			 
			 ДокОбъект = ТекСтрока.ДокументСсылка.ПолучитьОбъект();
			 
		 Иначе
			 
			 ДокОбъект = Документы.ргОтражениеОперацииНаПолигоне.СоздатьДокумент();
			 
			 ДокОбъект.Дата			= ТекСтрока.ДатаЗаезда;
			 ДокОбъект.Организация	= ТекСтрока.Организация;
			 
			 ДокОбъект.УстановитьНовыйНомер();
			 
		 КонецЕсли;
		 
		 ДокОбъект.Дата							= ТекСтрока.ДатаЗаезда;
		 ДокОбъект.Организация					= ТекСтрока.Организация;
		 ДокОбъект.ОтражатьВБухгалтерскомУчете	= ТекСтрока.ДоговорКонтрагента.ргОтражатьВБухгалтерскомУчете;
		 ДокОбъект.ВидЦен						= ТекСтрока.ДоговорКонтрагента.ВидЦен;
		 ДокОбъект.НалогообложениеНДС			= Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		 ДокОбъект.СуммаВключаетНДС				= ?(ЗначениеЗаполнено(ДокОбъект.ВидЦен), ДокОбъект.ВидЦен.ЦенаВключаетНДС, Истина);
		 ДокОбъект.ЭлектроннаяКарта				= ТекСтрока.ЭлектроннаяКарта;
		 ДокОбъект.Контрагент					= ТекСтрока.Контрагент;
		 ДокОбъект.АдресКонтрагента				= ТекСтрока.АдресКонтрагента;
		 ДокОбъект.ДоговорКонтрагента			= ТекСтрока.ДоговорКонтрагента;
		 ДокОбъект.ВидОперацииНаПолигоне			= ТекСтрока.ВидОперацииНаПолигоне;
		 ДокОбъект.Автомашина					= ТекСтрока.Автомашина;
		 ДокОбъект.ГосударственныйНомер			= ТекСтрока.ГосударственныйНомер;
		 ДокОбъект.Водитель						= ТекСтрока.Водитель;
		 ДокОбъект.Полигон						= ТекСтрока.Полигон;
		 ДокОбъект.Вес							= ТекСтрока.ВесНетто;
		 ДокОбъект.Контейнер						= ТекСтрока.Контейнер;
		 ДокОбъект.Автор							= Пользователи.ТекущийПользователь();
		 ДокОбъект.Обработан						= ТекСтрока.ФлагОбработки;
		 
		 //
		 ДокОбъект.ВесДо						= ТекСтрока.ВесДо;
		 ДокОбъект.ВесПосле						= ТекСтрока.ВесПосле;
		 Если ДокОбъект.ВесПоВесам = 0 Тогда
			 ДокОбъект.ВесПоВесам					= ТекСтрока.ВесДо - ДокОбъект.ВесПосле;
		 Иначе
			 ДокОбъект.ВесПоВесам = ТекСтрока.ВесПоВесам;	 
		 КонецЕсли;
		 //
		 
		 ДокОбъект.Отходы.Очистить();
		 
		 Для Каждого Строка Из МассивСтрокОтходы Цикл
			 
			 ЦенаСтроки = 0;
			 Если ЗначениеЗаполнено(ДокОбъект.ВидЦен) Тогда
				 
				 СтруктураДанных = Новый Структура;
				 СтруктураДанных.Вставить("ВидЦен",				ДокОбъект.ВидЦен);
				 СтруктураДанных.Вставить("СуммаВключаетНДС",	ДокОбъект.СуммаВключаетНДС);
				 СтруктураДанных.Вставить("ДатаОбработки",		ДокОбъект.Дата);
				 СтруктураДанных.Вставить("Номенклатура",		Строка.Номенклатура);
				 СтруктураДанных.Вставить("Характеристика",		Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
				 СтруктураДанных.Вставить("Коэффициент",			Строка.Коэффициент);
				 СтруктураДанных.Вставить("ВалютаДокумента",		ДокОбъект.ДоговорКонтрагента.ВалютаРасчетов);
				 
				 ЦенаСтроки = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанных);
				 
			 КонецЕсли;
			 
			 СтрокаОтходов = ДокОбъект.Отходы.Добавить();
			 
			 СтрокаОтходов.Номенклатура		= Строка.Номенклатура;
			 СтрокаОтходов.Количество		= Строка.Количество;
			 СтрокаОтходов.ЕдиницаИзмерения	= Строка.ЕдиницаИзмерения;
			 СтрокаОтходов.Коэффициент		= Строка.Коэффициент;
			 СтрокаОтходов.Талон				= Строка.Талон;
			 СтрокаОтходов.Цена				= ЦенаСтроки;
			 СтрокаОтходов.Сумма				= ЦенаСтроки * Строка.Количество;
			 СтрокаОтходов.СтавкаНДС			= Строка.Номенклатура.СтавкаНДС;
			 СтрокаОтходов.СуммаНДС			= ргМодульВывозМусораСервер.РассчитатьСуммуНДС(СтрокаОтходов.Сумма, ДокОбъект.СуммаВключаетНДС, СтрокаОтходов.СтавкаНДС);
			 СтрокаОтходов.Всего				= СтрокаОтходов.Сумма + ?(ДокОбъект.СуммаВключаетНДС, 0, СтрокаОтходов.СуммаНДС);
			 
		 КонецЦикла;
		 
		 Попытка
			 ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		 Исключение
			 ТекстСообщения = "Строка № " + ТекСтрока.НомерСтроки + " не сохранена!" + Символы.ПС + "по причине: " + ОписаниеОшибки();
			 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			 ТекСтрока.Вставить("ЕстьОшибки",		Истина);
			 ТекСтрока.Вставить("ФлагЗаполнения",	Ложь);
		 КонецПопытки;	
		 
		 Если Не ТекСтрока.ЕстьОшибки Тогда
			 ТекСтрока.Вставить("ДокументСсылка",	ДокОбъект.Ссылка);
			 ТекСтрока.Вставить("НомерДокумента",	ДокОбъект.Номер);
			 Если ДокОбъект.ПроверитьЗаполнение() Тогда
				 Попытка
					 ДокОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				 Исключение
					 ТекСтрока.Вставить("ЕстьОшибки",		Истина);
					 ТекСтрока.Вставить("ФлагЗаполнения",	Ложь);
				 КонецПопытки;
			 Иначе
				 ТекСтрока.Вставить("ЕстьОшибки",		Истина);
				 ТекСтрока.Вставить("ФлагЗаполнения",	Ложь);
			 КонецЕсли;
		 КонецЕсли;	
		 
	 ИначеЕсли ТекСтрока.ВидОперацииНаПолигоне = Перечисления.ргВидыОперацийНаПолигоне.УтилизацияОтходов Тогда	
		 
		 Если ЗначениеЗаполнено(ТекСтрока.ДокументСсылка) Тогда
			 
			 ДокОбъект = ТекСтрока.ДокументСсылка.ПолучитьОбъект();
			 
		 Иначе
			 
			 ДокОбъект = Документы.ргОтражениеОперацииНаПолигоне.СоздатьДокумент();
			 
			 ДокОбъект.Дата			= ТекСтрока.ДатаЗаезда;
			 ДокОбъект.Организация	= ТекСтрока.Организация;
			 
			 ДокОбъект.УстановитьНовыйНомер();
			 
		 КонецЕсли;
		 
		 ДокОбъект.Дата							= ТекСтрока.ДатаЗаезда;
		 ДокОбъект.Организация					= ТекСтрока.Организация;
		 ДокОбъект.ОтражатьВБухгалтерскомУчете	= ТекСтрока.ДоговорКонтрагента.ргОтражатьВБухгалтерскомУчете;
		 ДокОбъект.ВидЦен						= ТекСтрока.ДоговорКонтрагента.ВидЦен;
		 ДокОбъект.НалогообложениеНДС			= Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		 ДокОбъект.СуммаВключаетНДС				= ?(ЗначениеЗаполнено(ДокОбъект.ВидЦен), ДокОбъект.ВидЦен.ЦенаВключаетНДС, Истина);
		 ДокОбъект.ЭлектроннаяКарта				= ТекСтрока.ЭлектроннаяКарта;
		 ДокОбъект.Контрагент					= ТекСтрока.Контрагент;
		 ДокОбъект.АдресКонтрагента				= ТекСтрока.АдресКонтрагента;
		 ДокОбъект.ДоговорКонтрагента			= ТекСтрока.ДоговорКонтрагента;
		 ДокОбъект.ВидОперацииНаПолигоне			= ТекСтрока.ВидОперацииНаПолигоне;
		 ДокОбъект.Автомашина					= ТекСтрока.Автомашина;
		 ДокОбъект.ГосударственныйНомер			= ТекСтрока.ГосударственныйНомер;
		 ДокОбъект.Водитель						= ТекСтрока.Водитель;
		 ДокОбъект.Полигон						= ТекСтрока.ПолигонПолучатель;
		 ДокОбъект.ПолигонОтправитель			= ТекСтрока.Полигон;
		 ДокОбъект.Вес							= ТекСтрока.ВесНетто;
		 ДокОбъект.Контейнер						= ТекСтрока.Контейнер;
		 ДокОбъект.Автор							= Пользователи.ТекущийПользователь();
		 
		 //
		 ДокОбъект.ВесДо						= ТекСтрока.ВесДо;
		 ДокОбъект.ВесПосле						= ТекСтрока.ВесПосле;
		 Если ДокОбъект.ВесПоВесам = 0 Тогда
			 ДокОбъект.ВесПоВесам					= ТекСтрока.ВесДо - ДокОбъект.ВесПосле;
		 Иначе
			 ДокОбъект.ВесПоВесам = ТекСтрока.ВесПоВесам;	 
		 КонецЕсли; 
		 //
		 
		 ДокОбъект.Отходы.Очистить();
		 
		 Для Каждого Строка Из МассивСтрокОтходы Цикл
			 
			 ЦенаСтроки = 0;
			 Если ЗначениеЗаполнено(ДокОбъект.ВидЦен) Тогда
				 
				 СтруктураДанных = Новый Структура;
				 СтруктураДанных.Вставить("ВидЦен",				ДокОбъект.ВидЦен);
				 СтруктураДанных.Вставить("СуммаВключаетНДС",	ДокОбъект.СуммаВключаетНДС);
				 СтруктураДанных.Вставить("ДатаОбработки",		ДокОбъект.Дата);
				 СтруктураДанных.Вставить("Номенклатура",		Строка.Номенклатура);
				 СтруктураДанных.Вставить("Характеристика",		Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
				 СтруктураДанных.Вставить("Коэффициент",			Строка.Коэффициент);
				 СтруктураДанных.Вставить("ВалютаДокумента",		ДокОбъект.ДоговорКонтрагента.ВалютаРасчетов);
				 
				 ЦенаСтроки = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанных);
				 
			 КонецЕсли;
			 
			 СтрокаОтходов = ДокОбъект.Отходы.Добавить();
			 
			 СтрокаОтходов.Номенклатура		= Строка.Номенклатура;
			 СтрокаОтходов.Количество		= Строка.Количество;
			 СтрокаОтходов.ЕдиницаИзмерения	= Строка.ЕдиницаИзмерения;
			 СтрокаОтходов.Коэффициент		= Строка.Коэффициент;
			 СтрокаОтходов.Талон				= Строка.Талон;
			 СтрокаОтходов.Цена				= ЦенаСтроки;
			 СтрокаОтходов.Сумма				= ЦенаСтроки * Строка.Количество;
			 СтрокаОтходов.СтавкаНДС			= Строка.Номенклатура.СтавкаНДС;
			 СтрокаОтходов.СуммаНДС			= ргМодульВывозМусораСервер.РассчитатьСуммуНДС(СтрокаОтходов.Сумма, ДокОбъект.СуммаВключаетНДС, СтрокаОтходов.СтавкаНДС);
			 СтрокаОтходов.Всего				= СтрокаОтходов.Сумма + ?(ДокОбъект.СуммаВключаетНДС, 0, СтрокаОтходов.СуммаНДС);
			 
		 КонецЦикла;
		 
		 Попытка
			 ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		 Исключение
			 ТекстСообщения = "Строка № " + ТекСтрока.НомерСтроки + " не сохранена!" + Символы.ПС + "по причине: " + ОписаниеОшибки();
			 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			 ТекСтрока.Вставить("ЕстьОшибки",		Истина);
			 ТекСтрока.Вставить("ФлагЗаполнения",	Ложь);
		 КонецПопытки;	
		 
		 Если Не ТекСтрока.ЕстьОшибки Тогда
			 ТекСтрока.Вставить("ДокументСсылка",	ДокОбъект.Ссылка);
			 ТекСтрока.Вставить("НомерДокумента",	ДокОбъект.Номер);
			 Если ДокОбъект.ПроверитьЗаполнение() Тогда
				 Попытка
					 ДокОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				 Исключение
					 ТекСтрока.Вставить("ЕстьОшибки",		Истина);
					 ТекСтрока.Вставить("ФлагЗаполнения",	Ложь);
				 КонецПопытки;
			 Иначе
				 ТекСтрока.Вставить("ЕстьОшибки",		Истина);
				 ТекСтрока.Вставить("ФлагЗаполнения",	Ложь);
			 КонецЕсли;
		 КонецЕсли;	
		 
	 КонецЕсли;	
	 
 КонецПроцедуры
 
 &НаСервереБезКонтекста
 // Процедура добавляет запись в регистр "ргРабочееМестоДиспетчераПолигона"
 //
 //  Параметры:
 //   ТекСтрока - строка ТЧ "ТаблицаДанных"
 //
 Процедура СохранитьДанныеСтрокиВРегистр(ТекСтрока, МассивСтрокОтходы)
	 
	 НаборЗаписей = РегистрыСведений.ргРабочееМестоДиспетчераПолигона.СоздатьНаборЗаписей();
	 
	 НаборЗаписей.Отбор.Полигон.Значение						= ТекСтрока.Полигон;
	 НаборЗаписей.Отбор.Полигон.Использование				= Истина;
	 НаборЗаписей.Отбор.Дата.Значение						= ?(ТекСтрока.ДатаЗаезда=Дата("00010101"), ТекСтрока.Дата, ТекСтрока.ДатаЗаезда);
	 НаборЗаписей.Отбор.Дата.Использование					= Истина;
	 НаборЗаписей.Отбор.НомерСтрокиИнтерфейса.Значение		= ТекСтрока.НомерСтрокиИнтерфейса;
	 НаборЗаписей.Отбор.НомерСтрокиИнтерфейса.Использование	= Истина;
	 
	 НоваяСтрока = НаборЗаписей.Добавить();
	 
	 ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	 
	 НоваяСтрока.Дата	= ?(ТекСтрока.ДатаЗаезда=Дата("00010101"), ТекСтрока.Дата, ТекСтрока.ДатаЗаезда);
	 НоваяСтрока.Полигон	= ТекСтрока.Полигон;
	 
	 Попытка
		 НаборЗаписей.Записать();
	 Исключение
		 ТекстСообщения = "Не удалось сохранить строку в регистр" + Символы.ПС + "по причине: " + ОписаниеОшибки();
		 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	 КонецПопытки;
	 
	 // Сохраним данные строк таблицы отходов
	 НаборЗаписей = РегистрыСведений.ргРабочееМестоДиспетчераПолигонаОтходы.СоздатьНаборЗаписей();
	 
	 НаборЗаписей.Отбор.Полигон.Значение						= ТекСтрока.Полигон;
	 НаборЗаписей.Отбор.Полигон.Использование				= Истина;
	 НаборЗаписей.Отбор.Дата.Значение						= ?(ТекСтрока.ДатаЗаезда=Дата("00010101"), ТекСтрока.Дата, ТекСтрока.ДатаЗаезда);
	 НаборЗаписей.Отбор.Дата.Использование					= Истина;
	 НаборЗаписей.Отбор.НомерСтрокиИнтерфейса.Значение		= ТекСтрока.НомерСтрокиИнтерфейса;
	 НаборЗаписей.Отбор.НомерСтрокиИнтерфейса.Использование	= Истина;
	 
	 Для Каждого Строка Из МассивСтрокОтходы Цикл
		 
		 НоваяСтрока = НаборЗаписей.Добавить();
		 
		 НоваяСтрока.Дата	= ?(ТекСтрока.ДатаЗаезда=Дата("00010101"), ТекСтрока.Дата, ТекСтрока.ДатаЗаезда);
		 НоваяСтрока.Полигон	= ТекСтрока.Полигон;
		 
		 ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		 
	 КонецЦикла;
	 
	 Попытка
		 НаборЗаписей.Записать();
	 Исключение
		 Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);	
	 КонецПопытки;
	 
 КонецПроцедуры
 
 &НаКлиенте
 // Процедура запускает сервисные механизмы записи данных
 //
 Процедура УдалитьДанные()
	 
	 Если мТекИДСтроки = Неопределено Тогда
		 Возврат;
	 КонецЕсли;
	 
	 ТекСтрока = Объект.ТаблицаДанных.НайтиПоИдентификатору(мТекИДСтроки);
	 Если ТекСтрока = Неопределено Тогда
		 Возврат;
	 КонецЕсли;
	 
	 СтруктураСтроки = ПолучитьСтруктуруТекущейСтроки(ТекСтрока);
	 
	 УдалитьЗаписьДокумента(СтруктураСтроки);
	 
	 Если Не СтруктураСтроки.ЕстьОшибки Тогда
		 ТекСтрока.ДокументСсылка	= Неопределено;
		 ТекСтрока.НомерДокумента	= "";
		 ТекСтрока.ФлагЗаполнения	= Ложь;
	 КонецЕсли;
	 
	 УдалитьЗаписьРегистра(СтруктураСтроки);
	 
 КонецПроцедуры
 
 &НаСервереБезКонтекста
 // Процедура удаляет необходимые записи в документах
 //
 //  Параметры:
 //   ТекСтрока - строка ТЧ "ТаблицаДанных"
 //
 Процедура УдалитьЗаписьДокумента(ТекСтрока)
	 
	 ДокСсылка = ТекСтрока.ДокументСсылка;
	 Если Не ЗначениеЗаполнено(ДокСсылка) Тогда
		 Возврат;
	 КонецЕсли;
	 
	 ДокОбъект = ДокСсылка.ПолучитьОбъект();
	 Если ТипЗнч(ДокСсылка) = Тип("ДокументСсылка.ргПутевойЛист") Тогда
		 
		 МассивДляУдаления = ДокОбъект.Захоронение.НайтиСтроки(Новый Структура("НомерСтрокиИнтерфейсаПолигона", ТекСтрока.НомерСтрокиИнтерфейса));
		 Для Каждого СтрокаДляУдаления Из МассивДляУдаления Цикл
			 ДокОбъект.Захоронение.Удалить(СтрокаДляУдаления);
		 КонецЦикла;
		 
		 ДокОбъект.ДополнительныеСвойства.мНеобходимКонтрольОбработки		= Ложь;
		 ДокОбъект.ДополнительныеСвойства.мНеобходимРасчетИтогаПоВыручке		= Ложь;
		 ДокОбъект.ДополнительныеСвойства.мНеобходимРасчетИтогаПоЗарплате	= Ложь;
		 
		 Если ДокОбъект.Проведен Тогда
			 Попытка
				 ДокОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			 Исключение
				 ТекстСообщения = "Не удалось очистить данные документа" + Символы.ПС + "по причине " + ОписаниеОшибки();
				 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				 ТекСтрока.Вставить("ЕстьОшибки", Истина);
			 КонецПопытки;
		 Иначе
			 Попытка
				 ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			 Исключение
				 ТекстСообщения = "Не удалось очистить данные документа" + Символы.ПС + "по причине " + ОписаниеОшибки();
				 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				 ТекСтрока.Вставить("ЕстьОшибки", Истина);
			 КонецПопытки;
		 КонецЕсли;
		 
	 Иначе
		 
		 Попытка
			 ДокОбъект.УстановитьПометкуУдаления(Истина);
		 Исключение
			 ТекстСообщения = "Не удалось очистить данные документа" + Символы.ПС + "по причине " + ОписаниеОшибки();
			 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			 ТекСтрока.Вставить("ЕстьОшибки", Истина);
		 КонецПопытки;
		 
	 КонецЕсли;	
	 
 КонецПроцедуры	
 
 &НаСервереБезКонтекста
 // Процедура удаляет запись регистра "ргРабочееМестоДиспетчераПолигона"
 //
 //  Параметры:
 //   ТекСтрока - строка ТЧ "ТаблицаДанных"
 //
 Процедура УдалитьЗаписьРегистра(ТекСтрока)
	 
	 НаборЗаписей = РегистрыСведений.ргРабочееМестоДиспетчераПолигона.СоздатьНаборЗаписей();
	 
	 НаборЗаписей.Отбор.Полигон.Значение						= ТекСтрока.Полигон;
	 НаборЗаписей.Отбор.Полигон.Использование				= Истина;
	 НаборЗаписей.Отбор.Дата.Значение						= ?(ТекСтрока.ДатаЗаезда=Дата("00010101"), ТекСтрока.Дата, ТекСтрока.ДатаЗаезда);
	 НаборЗаписей.Отбор.Дата.Использование					= Истина;
	 НаборЗаписей.Отбор.НомерСтрокиИнтерфейса.Значение		= ТекСтрока.НомерСтрокиИнтерфейса;
	 НаборЗаписей.Отбор.НомерСтрокиИнтерфейса.Использование	= Истина;
	 
	 НаборЗаписей.Очистить();
	 
	 Попытка
		 НаборЗаписей.Записать();
	 Исключение
		 ТекстСообщения = "Не удалось сохранить строку в регистр" + Символы.ПС + "по причине: " + ОписаниеОшибки();
		 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	 КонецПопытки;
	 
	 // Удалим данные строк таблицы отходов
	 НаборЗаписей = РегистрыСведений.ргРабочееМестоДиспетчераПолигонаОтходы.СоздатьНаборЗаписей();
	 
	 НаборЗаписей.Отбор.Полигон.Значение						= ТекСтрока.Полигон;
	 НаборЗаписей.Отбор.Полигон.Использование				= Истина;
	 НаборЗаписей.Отбор.Дата.Значение						= ?(ТекСтрока.ДатаЗаезда=Дата("00010101"), ТекСтрока.Дата, ТекСтрока.ДатаЗаезда);
	 НаборЗаписей.Отбор.Дата.Использование					= Истина;
	 НаборЗаписей.Отбор.НомерСтрокиИнтерфейса.Значение		= ТекСтрока.НомерСтрокиИнтерфейса;
	 НаборЗаписей.Отбор.НомерСтрокиИнтерфейса.Использование	= Истина;
	 
	 НаборЗаписей.Очистить();
	 
	 Попытка
		 НаборЗаписей.Записать();
	 Исключение
		 Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);
	 КонецПопытки;
	 
 КонецПроцедуры
 
 &НаСервереБезКонтекста
 // Получает набор данных с сервера для поля "Контрагент"
 //
 Функция ПолучитьКонтрагентовДиспетчераПолигона()
	 
	 СписокКонтрагентов = Новый СписокЗначений;
	 
	 Выборка = РегистрыСведений.ргКонтрагентыДиспетчераПолигона.Выбрать();
	 Пока Выборка.Следующий() Цикл
		 СписокКонтрагентов.Добавить(Выборка.Контрагент, Выборка.Контрагент);
	 КонецЦикла;
	 
	 СписокКонтрагентов.СортироватьПоПредставлению();
	 
	 Возврат СписокКонтрагентов.ВыгрузитьЗначения();
	 
 КонецФункции
 
 &НаКлиенте
 // Получает набор данных с сервера для поля "Контрагент"
 //
 Процедура ОбновитьСписокВыбораКонтрагентов()
	 
	 МассивКонтрагентов = ПолучитьКонтрагентовДиспетчераПолигона();
	 
	 Элементы.Контрагент.СписокВыбора.ЗагрузитьЗначения(МассивКонтрагентов);
	 Элементы.ТаблицаДанныхКонтрагент.СписокВыбора.ЗагрузитьЗначения(МассивКонтрагентов);
	 
 КонецПроцедуры
 
 &НаСервереБезКонтекста
 // Функиця находит документ по штрихкоду.
 //
 Функция НайтиДокументПоШтрихкоду(Штрихкод)
	 
	 Документ = Документы.ргТалон.НайтиПоРеквизиту("Штрихкод", Штрихкод);
	 Возврат Документ;
	 
 КонецФункции
 
 &НаКлиенте
 // Процедура обрабатывает поулченные штрихкод.
 //
 Процедура ОбработатьШтрихкод(Штрихкод) 
	 
	 Если ЗначениеЗаполнено(Штрихкод) Тогда
		 Документ = НайтиДокументПоШтрихкоду(Штрихкод);
		 Если ЗначениеЗаполнено(Документ) Тогда
			 ОбработатьВыборТалона(Документ);
		 КонецЕсли;
	 КонецЕсли;
	 
 КонецПроцедуры
 
 &НаКлиенте
 // Процедура обрабатывает выбор талона в строке.
 //
 Процедура ОбработатьВыборТалона(Талон)
	 
	 ТекСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
	 Если ТекСтрока = Неопределено Тогда
		 Возврат;
	 КонецЕсли;
	 
	 СтруктураТалона = ПолучитьДанныеПриИзмененииТалона(Талон, ТекСтрока.ВидОперацииНаПолигоне);
	 
	 ТекСтрока.Организация			= СтруктураТалона.Организация;
	 ТекСтрока.Контрагент			= СтруктураТалона.Контрагент;
	 ТекСтрока.ДоговорКонтрагента	= СтруктураТалона.ДоговорКонтрагента;
	 ТекСтрока.ПолигонПолучатель		= СтруктураТалона.ПолигонПолучатель;
	 ТекСтрока.Номенклатура			= СтруктураТалона.Номенклатура;
	 ТекСтрока.ЕдиницаИзмерения		= СтруктураТалона.ЕдиницаИзмерения;
	 ТекСтрока.Коэффициент			= СтруктураТалона.Коэффициент;
	 ТекСтрока.Талон					= СтруктураТалона.Талон;
	 ТекСтрока.НомерТалона			= СтруктураТалона.НомерТалона;
	 ТекСтрока.ФлагИзменений			= Истина;
	 
 КонецПроцедуры
 
 ////////////////////////////////////////////////////////////////////////////////////////
 // ФУНКЦИИ - ОБРАБОТЧИКИ СОБЫТИЙ ПРИ ИЗМЕНЕНИИ ДАННЫХ
 
 &НаСервереБезКонтекста
 // Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
 //
 Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент)
	 
	 СтруктураДанные = Новый Структура();
	 
	 СтруктураДанные.Вставить("Договор",		Контрагент.ДоговорПоУмолчанию);
	 СтруктураДанные.Вставить("Организация", Контрагент.ДоговорПоУмолчанию.Организация);
	 
	 Возврат СтруктураДанные;
	 
 КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()
 
 &НаСервереБезКонтекста
 // Получает набор данных с сервера для процедуры ДоговорКонтрагентаПриИзменении.
 //
 Функция ПолучитьДанныеДоговорКонтрагентаПриИзменении(ДоговорКонтрагента)
	 
	 СтруктураДанные = Новый Структура();
	 
	 СтруктураДанные.Вставить("Контрагент",	ДоговорКонтрагента.Владелец);
	 СтруктураДанные.Вставить("Организация",	ДоговорКонтрагента.Организация);
	 
	 Возврат СтруктураДанные;
	 
 КонецФункции // ПолучитьДанныеДоговорКонтрагентаПриИзменении()
 
 &НаСервереБезКонтекста
 // Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
 //
 Функция ПолучитьДанныеНоменклатураПриИзменении(Номенклатура)
	 
	 СтруктураДанные = Новый Структура();
	 
	 СтруктураДанные.Вставить("ЕдиницаИзмерения",	Номенклатура.ЕдиницаИзмерения);
	 СтруктураДанные.Вставить("Коэффициент",			1);
	 
	 Возврат СтруктураДанные;
	 
 КонецФункции // ПолучитьДанныеДоговорКонтрагентаПриИзменении()
 
 &НаСервереБезКонтекста
 // Получает набор данных с сервера для процедуры ЕдиницаИзмеренияПриИзменении.
 //
 Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ЕдиницаИзмерения)
	 
	 СтруктураДанные = Новый Структура();
	 
	 Если ТипЗнч(ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
		 СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	 Иначе
		 СтруктураДанные.Вставить("Коэффициент", 1);
	 КонецЕсли;	
	 
	 Возврат СтруктураДанные;
	 
 КонецФункции	
 
 &НаСервереБезКонтекста
 // Функция возвращает структуру данных при изменении талона
 //
 //  Параметры:
 //   Талон     - документ "ргТалоны"
 //   ВидОперацииНаПолигоне
 Функция ПолучитьДанныеПриИзмененииТалона(Талон, ВидОперацииНаПолигоне)
	 
	 СтруктураТалона = Новый Структура;
	 
	 ПолигонТалона = ?(ВидОперацииНаПолигоне = Перечисления.ргВидыОперацийНаПолигоне.ВывозМусора Или
	 ВидОперацииНаПолигоне = Перечисления.ргВидыОперацийНаПолигоне.УтилизацияОтходов, Талон.Полигон, Неопределено);
	 
	 СтруктураЕдиницы = ргМодульВывозМусораСервер.ПолучитьСтруктуруЕдиницыИзмерения(Талон.Номенклатура, Талон.Номинал);
	 
	 СтруктураТалона.Вставить("Организация",			Талон.Организация);
	 СтруктураТалона.Вставить("Контрагент",			Талон.Контрагент);
	 СтруктураТалона.Вставить("ДоговорКонтрагента",	Талон.ДоговорКонтрагента);
	 СтруктураТалона.Вставить("ПолигонПолучатель",	ПолигонТалона);
	 СтруктураТалона.Вставить("Номенклатура",		Талон.Номенклатура);
	 СтруктураТалона.Вставить("ЕдиницаИзмерения",	СтруктураЕдиницы.ЕдиницаИзмерения);
	 СтруктураТалона.Вставить("Коэффициент",			СтруктураЕдиницы.Коэффициент);
	 СтруктураТалона.Вставить("Талон",				Талон);
	 СтруктураТалона.Вставить("НомерТалона",			Талон.Номер);
	 СтруктураТалона.Вставить("ФлагИзменений",		Истина);
	 
	 Возврат СтруктураТалона;
	 
 КонецФункции
 
 ////////////////////////////////////////////////////////////////////////////////////////
 // ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
 
 &НаСервере
 // Процедура - обработчик события "ПриСозданииНаСервере" формы
 //
 Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	 
	 
	 ргМодульВывозМусораСерверПроф.ИнициализацияПараметровВывозМусораПроф(ПараметрыВывозМусораПроф);
	 
	 Объект.Дата			= ТекущаяДата();
	 мТекДатаТаблицы		= Объект.Дата;
	 мОрганизация		= УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнаяОрганизация");
	 Объект.Полигон		= УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ргОсновнойПолигон");
	 Если ЗначениеЗаполнено(Объект.Полигон) Тогда
		 мКонтрагент		= Объект.Полигон.Контрагент;
		 мДоговор		= Объект.Полигон.ДоговорКонтрагента;
		 мОрганизация	= мДоговор.Организация;
	 КонецЕсли;
	 мМаксимальныйНомер	= 0;
	 
	 ВосстановитьДанныеНаДату();
	 
	 // ПодключаемоеОборудование
	 ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	 // Конец ПодключаемоеОборудование
	 
	 СКоПФизЛицо = Справочники.Контрагенты.НайтиПоКоду("ж00000001");
 КонецПроцедуры
 
 
 
  &НаКлиенте
 Функция ОтборПоНоменклатуреДоговора()
	 
	 ТаблицаНоменклатурыДоговора.Очистить();
	 
	 ПолучитьТаблицуЦен(Элементы.ТаблицаДанных.ТекущиеДанные.ДоговорКонтрагента);
	 
	 МассивОтбораПоНоменклатуре = Новый Массив;
	 Для Каждого Строка Из ТаблицаНоменклатурыДоговора Цикл
	     МассивОтбораПоНоменклатуре.Добавить(Строка.Наименование);
	 КонецЦикла;
	 
	 НовыйПараметр = Новый Структура("Отбор", Новый Структура("Наименование,Родитель", МассивОтбораПоНоменклатуре, ЗаполнитьПараметрРодителя()));  
	 
	 ///////
	 НовыйМассив = Новый Массив;
	 НовыйПараметрНом = Новый ПараметрВыбора("Отбор.Наименование", Новый ФиксированныйМассив(МассивОтбораПоНоменклатуре));
	 НовыйМассив.Добавить(НовыйПараметрНом);
	 НовыйМассив = ЗаполнитьПараметрПоля(НовыйМассив);
	 НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	 ЭтаФорма.Элементы.ТаблицаОтходовНоменклатура.ПараметрыВыбора  = НовыеПараметры;
	 /////
	 
	 	 
	 Возврат НовыйПараметр;
	 
 КонецФункции
 
 &НаСервере
 Функция ЗаполнитьПараметрРодителя()
	 
	 Возврат Справочники.Номенклатура.НайтиПоКоду("ВМ-00000145");
	 
 КонецФункции

   &НаСервере
 Функция ЗаполнитьПараметрПоля(НовыйПараметр)
	 
	 НовыйМассивГрупп = Новый Массив;
	 НовыйМассивГрупп.Добавить(Справочники.Номенклатура.НайтиПоКоду("ВМ-00000145"));

	 ЗначениеОтбора = Новый ПараметрВыбора("Отбор.Родитель",  Новый ФиксированныйМассив(НовыйМассивГрупп));
	 НовыйПараметр.Добавить(ЗначениеОтбора);	
	 
	 Возврат НовыйПараметр;
	 
 КонецФункции

 
 &НаСервере
 Функция   ПолучитьДатуДоговора(ДоговорКонтрагента)
	 
	 СтруктураПараметров = Новый Структура;
	 СтруктураПараметров.Вставить("ДатаДоговора", ДоговорКонтрагента.ДатаДоговора);
	 СтруктураПараметров.Вставить("ВидЦен", ДоговорКонтрагента.ВидЦен);
	 
	 Возврат СтруктураПараметров;
	 
 КонецФункции

 &НаСервере
Процедура ПолучитьТаблицуЦен(ДоговорКонтрагента)
	
	ДатаСрезаЦены = ?(ДоговорКонтрагента.ДатаДоговора = Дата("00010101"), ТекущаяДата(), ?(ТекущаяДата() > ДоговорКонтрагента.ДатаДоговора, ТекущаяДата(), ДоговорКонтрагента.ДатаДоговора));
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Период,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения,
	|	ЦеныНоменклатурыСрезПоследних.Цена,
	|	ЦеныНоменклатурыСрезПоследних.ргПлощадка КАК Площадка,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура.Наименование КАК Наименование
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаСреза, ВидЦен = &ВидЦен) КАК ЦеныНоменклатурыСрезПоследних
	|ГДЕ
	|	ЦеныНоменклатурыСрезПоследних.Цена <> 0";
				   
	Запрос.УстановитьПараметр("ДатаСреза",	ДатаСрезаЦены);
	Запрос.УстановитьПараметр("ВидЦен",		ДоговорКонтрагента.ВидЦен);
	
	ТаблицаНоменклатурыДоговора.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры




 &НаКлиенте
 // Процедура - обработчик события "ПриОткрытии" формы
 //
 Процедура ПриОткрытии(Отказ)
	 
	 ОбновитьСписокВыбораКонтрагентов();
	 
	 // Добавление строки таблицы данных
	 ДобавитьНовуюСтроку();
	 
	 // Добавление строки таблицы отходов
	 ДобавитьНовуюСтрокуОтходов();
	 
	 ПодключитьКомпонентуРаботыСКартами();
	 
	 // ПодключаемоеОборудование
	 //МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	 МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	 // Конец ПодключаемоеОборудование
	 
	 
	 ПодключитьОбработчикОжидания("ОбновитьТабло", 1, Ложь);
	 
	 ПодключитьОбработчикОжидания("ОбновитьТабло2", 1, Ложь);

 КонецПроцедуры
 
  &НаКлиенте
  Процедура ОбновитьТабло()
	  СчСтарт = СчСтарт+1;
	  Если СчСтарт=2 Тогда 
		  ДрайверВыезд = Новый COMОбъект("CI2001A.v2.WeightReceiving");
		  ИндикаторВыезд = ДрайверВыезд.OpenPort("COM"+14);
		  
	  КонецЕсли;
	  Если СчСтарт>=2 Тогда 
	  	ПолучитьВес3(14, Ложь);
	  КонецЕсли;
  КонецПроцедуры
  
  &НаКлиенте
  Процедура ОбновитьТабло2()
	  СчСтарт2 = СчСтарт2+1;
	  Если СчСтарт2=2 Тогда 
		  ДрайверВыезд2 = Новый COMОбъект("CI2001A.v2.WeightReceiving");
		  ИндикаторВыезд2 = ДрайверВыезд2.OpenPort("COM"+11);  
	  КонецЕсли;
	  Если СчСтарт>=2 Тогда 
	  	ПолучитьВес3(11, Ложь);
	  КонецЕсли;
  КонецПроцедуры
  

 &НаКлиенте
 // Процедура - обработчик события "ОбработкаОповещения" формы
 //
 Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	 
	 Если ИмяСобытия = "РедактированиеСпискаКонтрагентовДиспетчера" Тогда
		 ОбновитьСписокВыбораКонтрагентов();
	 КонецЕсли;
	 
	 // ПодключаемоеОборудование
	 Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		 Если ИмяСобытия = "ScanData" Тогда
			 //Преобразуем предварительно к ожидаемому формату
			 Данные = Новый Массив();
			 Если Параметр[1] = Неопределено Тогда
				 Штрихкод = Параметр[0];
			 Иначе
				 Штрихкод = Параметр[1][1];
			 КонецЕсли;
			 
			 
			 ОбработатьШтрихкод(Штрихкод);
			 
		 КонецЕсли;
	 КонецЕсли;
	 // Конец ПодключаемоеОборудование
	 
 КонецПроцедуры
 
 &НаКлиенте
 // Процедура - обработчик события ПриЗакрытии.
 //
 Процедура ПриЗакрытии()
	 
	 // ПодключаемоеОборудование
	 //МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
	 МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(,ЭтаФорма);
	 // Конец ПодключаемоеОборудование
	 
	 РезультатОперации = ДрайверВыезд.ClosePort(ИндикаторВыезд);
	 
	 РезультатОперации2 = ДрайверВыезд2.ClosePort(ИндикаторВыезд2);


 КонецПроцедуры
 
 ////////////////////////////////////////////////////////////////////////////////////////
 // ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ
 
 &НаКлиенте
 // Обработчик события "ПриИзменении" поля ввода "Дата"
 //
 Процедура ДатаПриИзменении(Элемент)
	 
	 // Сохраним текущую строку
	 СохранитьДанные();
	 
	 Если ЗначениеЗаполнено(Объект.Дата) И ЗначениеЗаполнено(Объект.Полигон) Тогда
		 ВосстановитьДанныеНаДату();
	 КонецЕсли;	
	 
 КонецПроцедуры
 
 &НаКлиенте
 // Обработчик события "ПриИзменении" поля ввода "Полигон"
 //
 Процедура ПолигонПриИзменении(Элемент)
	 
	 // Сохраним текущую строку
	 СохранитьДанные();
	 
	 Если ЗначениеЗаполнено(Объект.Дата) И ЗначениеЗаполнено(Объект.Полигон) Тогда
		 ВосстановитьДанныеНаДату();
	 КонецЕсли;	
	 
 КонецПроцедуры
 
 ////////////////////////////////////////////////////////////////////////////////////////
 // ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ
 
 &НаКлиенте
 // Процедура обработчик команды "УдалитьИнфДокумента"
 //
 Процедура КомандаУдалитьДокументНажатие(Команда)
	 
	 УдалитьДанные();
	 
 КонецПроцедуры
 
 ////////////////////////////////////////////////////////////////////////////////////////
 // ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "ТаблицаДанных"
 
 &НаКлиенте
 // Процедура - обработчик события "ПриАктивизацииСтроки"
 // табличной части "ТаблицаДанных".
 Процедура ТаблицаДанныхПриАктивизацииСтроки(Элемент)
	 
	 СохранитьДанные();
	 
	 ТекСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
	 Если ТекСтрока <> Неопределено Тогда
		 мТекИДСтроки			= ТекСтрока.ПолучитьИдентификатор();
		 мТекДатаТаблицы			= ТекСтрока.ДатаЗаезда;
		 мТекАвтомашинаТаблицы	= ТекСтрока.Автомашина;
		 ОперацииПриИзмененииВидаОперации();
	 КонецЕсли;
	 
	 УстановитьОтборВТаблицеОтходов(ТекСтрока);
	 
	 УстановитьВидимость();
	 
	 ВыборПоДоговору = ПолучитьЗначениеДопРеквизита(Элементы.ТаблицаДанных.ТекущиеДанные.ДоговорКонтрагента, "Выбор по договору (Договоры)");
	 Если ВыборПоДоговору Тогда
		ПараметрыВыбораДляНом = ОтборПоНоменклатуреДоговора();
	 Иначе
		ПараметрыВыбораДляНом = ОтборПоНоменклатуреПоРодителю();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(мТекИДСтроки) и Элементы.ТаблицаДанных.ТекущиеДанные<>Неопределено Тогда
		НС = Объект.ТаблицаОтходов.НайтиСтроки(Новый Структура("НомерСтрокиИнтерфейса", Элементы.ТаблицаДанных.ТекущиеДанные.НомерСтрокиИнтерфейса));
		Если НС.Количество()>0 Тогда 
			МИдентификаторПоследнейСтроки = НС[0].ПолучитьИдентификатор();
			ПодключитьОбработчикОжидания("АктивироватьСтрокуОтходов",0.3,Истина);
		КонецЕсли;
	КонецЕсли;
	
	ПроверкаАтомашины(Элементы.ТаблицаДанных.ТекущиеДанные.Автомашина);

	 	 
КонецПроцедуры

Процедура  ПроверкаАтомашины(Автомашина)
	
	Если Автомашина = Справочники.ргАвтомашины.НайтиПоКоду("#00000003") Тогда
		Элементы.ФормаОтбитьЧек.Доступность = Ложь;	
	Иначе
		Элементы.ФормаОтбитьЧек.Доступность = Истина;		
	КонецЕсли;
	
	
	
КонецПроцедуры
 
 Функция  ОтборПоНоменклатуреПоРодителю()
	 
	 НовыйПараметр = Новый Структура;
	 ЗначениеОтбора = Новый Структура("Родитель", Справочники.Номенклатура.НайтиПоКоду("ВМ-00000145"));
	 НовыйПараметр.Вставить("Отбор", ЗначениеОтбора);	
	 	 
	 НовыйМассив = Новый Массив;
	 НовыйПараметрПоля = Новый ПараметрВыбора("Отбор.Родитель",  Справочники.Номенклатура.НайтиПоКоду("ВМ-00000145"));
	 НовыйМассив.Добавить(НовыйПараметрПоля);		 
	 НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	 ЭтаФорма.Элементы.ТаблицаОтходовНоменклатура.ПараметрыВыбора  = НовыеПараметры;


	 Возврат НовыйПараметр;
	 
 КонецФункции 
 
 Функция ПолучитьЗначениеДопРеквизита(Ссылка, Свойство) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентовДополнительныеРеквизиты.Значение
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов.ДополнительныеРеквизиты КАК ДоговорыКонтрагентовДополнительныеРеквизиты
		|ГДЕ
		|	ДоговорыКонтрагентовДополнительныеРеквизиты.Свойство.Наименование = &Наименование
		|	И ДоговорыКонтрагентовДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Наименование", Свойство);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
	
	Если ВыборкаДетальныеЗаписи.Количество() = 0 Тогда
        Возврат Ложь;
    Иначе
        Возврат ВыборкаДетальныеЗаписи[0].Значение;
	КонецЕсли;



КонецФункции
 
 
 &НаКлиенте
 // Процедура - обработчик события "ПередУдалением"
 // табличной части "ТаблицаДанных".
 //
 Процедура ТаблицаДанныхПередУдалением(Элемент, Отказ)
	 
	 
	 //Ответ = Вопрос("Вы действительно хотите удалить строку", РежимДиалогаВопрос.ДаНет);
	 //Если Ответ = КодВозвратаДиалога.Нет Тогда
	 //    Отказ = Истина;
	 //КонецЕсли;
	 
	 Если Не Отказ Тогда
		 УдалитьДанные();
	 КонецЕсли;
	 
 КонецПроцедуры
 

 
 &НаКлиенте
 // Процедура - обработчик события "ПриНачалеРедактирования"
 // табличной части "ТаблицаДанных".
 //
 Процедура ТаблицаДанныхПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	 
	 ТекСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
	 
	 Если НоваяСтрока Тогда
		 
		 ТекСтрока.ВидОперацииНаПолигоне	= ПредопределенноеЗначение("Перечисление.ргВидыОперацийНаПолигоне.ПриемОтходов");
		 ТекСтрока.Организация			= мОрганизация;
		 ТекСтрока.Контрагент			= мКонтрагент;
		 ТекСтрока.ДоговорКонтрагента	= мДоговор;
		 ТекСтрока.ФлагИзменений			= Истина;
		 ТекСтрока.НомерСтрокиИнтерфейса	= мМаксимальныйНомер + 1; 
		 ТекСтрока.ДатаЗаезда			= ?(Объект.Дата = НачалоДня(ТекущаяДата()), ТекущаяДата(), Объект.Дата);
		 ТекСтрока.ДокументСсылка		= Неопределено;
		 ТекСтрока.НомерДокумента		= "";
		 
		 мМаксимальныйНомер = мМаксимальныйНомер + 1;
		 
		 // Добавление строки таблицы отходов
		 ДобавитьНовуюСтрокуОтходов();
		 
		 УстановитьОтборВТаблицеОтходов(ТекСтрока);
		 
	 КонецЕсли;	
	 
 КонецПроцедуры
 
 &НаКлиенте
 // Процедура - обработчик события "ПриОкончанииРедактирования"
 // табличной части "ТаблицаДанных".
 //
 Процедура ТаблицаДанныхПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	 
	 Если Не ОтменаРедактирования Тогда
		 
		 ТекСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
		 
		 ТекСтрока.ФлагИзменений = Истина;
		 
	 КонецЕсли;	
	 
 КонецПроцедуры
 
 ////////////////////////////////////////////////////////////////////////////////////////
 // ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ "ТаблицаДанных"
 
 &НаКлиенте
 // Процедура - обработчик события "ПриИзменении" поля ввода "Дата"
 // в строке табличной части "ТаблицаДанных".
 //
 Процедура ТаблицаДанныхДатаПриИзменении(Элемент)
	 
	 ТекСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
	 Если НачалоДня(ТекСтрока.Дата) <> НачалоДня(мТекДатаТаблицы) Тогда
		 
		 ДатаСтроки		= ТекСтрока.Дата;
		 ТекСтрока.Дата	= мТекДатаТаблицы;
		 
		 УдалитьДанные();
		 
		 ТекСтрока.Дата	= ДатаСтроки;
		 
	 КонецЕсли;
	 
	 Если ТекСтрока.Дата < Объект.Дата Тогда
		 ПоказатьПредупреждение(, "Чтобы ввести запись задним числом, необходимо воспользоваться восстановлением!");
		 ТекСтрока.Дата = Объект.Дата;
	 КонецЕсли;
	 
	 ТекСтрока.ФлагИзменений = Истина;
	 
 КонецПроцедуры
 
 &НаКлиенте
 // Процедура - обработчик события "ПриИзменении" поля ввода "ВидОперацииНаПолигоне"
 // в строке табличной части "ТаблицаДанных".
 //
 Процедура ТаблицаДанныхВидОперацииНаПолигонеПриИзменении(Элемент)
	 
	 ОперацииПриИзмененииВидаОперации();
	 
 КонецПроцедуры
 
 &НаКлиенте
 // Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода "Автомашина"
 //
 Процедура ТаблицаДанныхАвтомашинаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	 
	 СписокАвтомашин = ргМодульВывозМусораСервер.ПолучитьСписокАвтомашинПоНаименованию(Текст);
	 Если СписокАвтомашин.Количество() > 0 Тогда
		 
		 СтандартнаяОбработка = Ложь;
		 ДанныеВыбора = СписокАвтомашин;
		 
	 КонецЕсли;		
	 
 КонецПроцедуры
 
 &НаКлиенте
 // Процедура - обработчик события "ПриИзменении" поля ввода "Автомашина".
 //
 Процедура ТаблицаДанныхАвтомашинаПриИзменении(Элемент)
	 
	 ТекСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
	 Если ТекСтрока.Автомашина <> мТекАвтомашинаТаблицы Тогда
		 УдалитьДанные();
	 КонецЕсли;
	 
	 Если ТекСтрока.Автомашина = ПредопределенноеЗначение("Справочник.ргАвтомашины.Чужие") или 
		 Строка(ТекСтрока.Автомашина) = "ЧУЖОЙ (ТЕРМИНАЛ)" Тогда
		 ТекСтрока.ВидОперацииНаПолигоне = ПредопределенноеЗначение("Перечисление.ргВидыОперацийНаПолигоне.ПриемЗаНаличку");
		 ОперацииПриИзмененииВидаОперации();
	 КонецЕсли;
	 
	 // Заполнение водителя
	 СтруктураДанных	= ргМодульВывозМусораСервер.ПолучитьДанныеАвтомашины(ТекСтрока.Автомашина, ТекСтрока.ДатаЗаезда);
	 
	 ТекСтрока.Водитель				= СтруктураДанных.Водитель;
	 ТекСтрока.ГосударственныйНомер	= СтруктураДанных.ГосударственныйНомер;
	 
	 Если ЗначениеЗаполнено(СтруктураДанных.НоменклатураОтходов) Тогда
		 
		 ТекСтрокаОтходов = Элементы.ТаблицаОтходов.ТекущиеДанные;
		 Если ТекСтрокаОтходов <> Неопределено Тогда
			 
			 ТекСтрокаОтходов.Номенклатура		= СтруктураДанных.НоменклатураОтходов;
			 ТекСтрокаОтходов.Количество			= 1;
			 ТекСтрокаОтходов.ЕдиницаИзмерения	= СтруктураДанных.ЕдиницаОтходов;
			 ТекСтрокаОтходов.Коэффициент		= СтруктураДанных.КоэффициентОтходов;
			 ТекСтрокаОтходов.Объем				= ТекСтрокаОтходов.Количество * ТекСтрокаОтходов.Коэффициент;
			 
			 ОбновитьИтогПоОбъемуСтрокиТаблицыДанных(ТекСтрока);
			 
		 КонецЕсли;
		 
	 КонецЕсли;
	 
	 ЭтаФорма.ТекущийЭлемент = Элементы.ТаблицаДанныхГосударственныйНомер;
	 
	 ПроверкаАтомашины(ТекСтрока.Автомашина);
	 
 КонецПроцедуры
 
 &НаКлиенте
 // Процедура - обработчик события "ПриИзменении" поля ввода "Контрагент"
 //
 Процедура ТаблицаДанныхКонтрагентПриИзменении(Элемент)
	 
	 ТекСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
	 Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
		 
		 // Обработка события изменения контрагента.
		 СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(ТекСтрока.Контрагент);
		 
		 ТекСтрока.ДоговорКонтрагента	= СтруктураДанные.Договор;
		 ТекСтрока.Организация			= СтруктураДанные.Организация;
		 
	 Иначе	
		 ТекСтрока.ДоговорКонтрагента	= Неопределено;
	 КонецЕсли;
	 
 КонецПроцедуры
 
 &НаКлиенте
 // Процедура - обработчик события "НачалоВыбора" поля ввода "Контрагент" в шапке и 
 // в строке табличной части "ТаблицаДанных".
 //
 Процедура ТаблицаДанныхКонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	 
	 СтандартнаяОбработка = Ложь;
	 
	 ОткрытьФорму("РегистрСведений.ргКонтрагентыДиспетчераПолигона.ФормаСписка", , Элемент);
	 
 КонецПроцедуры
 
 &НаКлиенте
 // Процедура - обработчик события "ПриИзменении" поля ввода "ДоговорКонтрагента"
 //
 Процедура ТаблицаДанныхДоговорКонтрагентаПриИзменении(Элемент)
	 
	 ТекСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
	 
	 // Обработка события изменения контрагента.
	 СтруктураДанные = ПолучитьДанныеДоговорКонтрагентаПриИзменении(ТекСтрока.ДоговорКонтрагента);
	 
	 ТекСтрока.Контрагент	= СтруктураДанные.Контрагент;
	 ТекСтрока.Организация	= СтруктураДанные.Организация;
	 
 КонецПроцедуры
 
 &НаКлиенте
 // Процедура - обработчик события "ПриИзменении" поля ввода "Номенклатура"
 //
 Процедура НоменклатураПриИзменении(Элемент)
	 
	 ТекСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
	 
	 // Определим единицу измерения
	 СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(ТекСтрока.Номенклатура);
	 
	 ТекСтрока.ЕдиницаИзмерения	= СтруктураДанные.ЕдиницаИзмерения;
	 ТекСтрока.Коэффициент		= СтруктураДанные.Коэффициент;
	 
 КонецПроцедуры
 
 &НаКлиенте
 // Процедура - обработчик события "ПриИзменении" поля ввода "ЕдиницаИзмерения"
 //
 Процедура ТаблицаДанныхЕдиницаИзмеренияПриИзменении(Элемент)
	 
	 ТекСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
	 
	 // Обработка события изменения единицы измерения.
	 СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекСтрока.ЕдиницаИзмерения);
	 
	 ТекСтрока.Коэффициент = СтруктураДанные.Коэффициент;
	 
 КонецПроцедуры
 
 &НаКлиенте
 // Процедура - обработчик события "ПриИзменении" поля ввода "ВесБрутто"
 // в строке табличной части "ТаблицаДанных".
 //
 Процедура ТаблицаДанныхВесБруттоПриИзменении(Элемент)
	 
	 ТекСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
	 
	 Если ТекСтрока.ВесБрутто <> 0 И ТекСтрока.ВесТара <> 0 Тогда
		 ТекСтрока.ВесНетто = ТекСтрока.ВесБрутто - ТекСтрока.ВесТара;
	 КонецЕсли;
	 
 КонецПроцедуры
 
 &НаКлиенте
 // Процедура - обработчик события "ПриИзменении" поля ввода "ВесТара"
 // в строке табличной части "ТаблицаДанных".
 //
 Процедура ТаблицаДанныхВесТараПриИзменении(Элемент)
	 
	 ТекСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
	 
	 Если ТекСтрока.ВесБрутто <> 0 И ТекСтрока.ВесТара <> 0 Тогда
		 ТекСтрока.ВесНетто = ТекСтрока.ВесБрутто - ТекСтрока.ВесТара; 
	 КонецЕсли;
	 
 КонецПроцедуры
 
 &НаКлиенте
 // Процедура - обработчик события "НачалоВыбора" поля ввода "НомерТалона"
 // в строке табличной части "ТаблицаДанных".
 //
 Процедура ТаблицаДанныхНомерТалонаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	 
	 СтандартнаяОбработка = Ложь;
	 
	 ТекСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
	 СтруктураОтбора = Новый Структура;	
	 Если ЗначениеЗаполнено(ТекСтрока.Организация) Тогда
		 СтруктураОтбора.Вставить("Организация", ТекСтрока.Организация);
	 КонецЕсли;
	 
	 Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
		 СтруктураОтбора.Вставить("Контрагент", ТекСтрока.Контрагент);
	 КонецЕсли;
	 
	 Если (ТекСтрока.ВидОперацииНаПолигоне = ПараметрыВывозМусораПроф.ВидыОперацийНаПолигонеВвозМусора Или
		 ТекСтрока.ВидОперацииНаПолигоне = ПараметрыВывозМусораПроф.ВидыОперацийНаПолигонеПриемОтходов) Тогда
		 СтруктураОтбора.Вставить("Полигон", Объект.Полигон);
	 ИначеЕсли (ТекСтрока.ВидОперацииНаПолигоне = ПараметрыВывозМусораПроф.ВидыОперацийНаПолигонеВывозМусора Или
		 ТекСтрока.ВидОперацииНаПолигоне = ПараметрыВывозМусораПроф.ВидыОперацийНаПолигонеУтилизацияОтходов) И
		 ЗначениеЗаполнено(ТекСтрока.ПолигонПолучатель) Тогда
		 СтруктураОтбора.Вставить("Полигон", ТекСтрока.ПолигонПолучатель);
	 КонецЕсли;
	 
	 СтруктураПараметров = Новый Структура;
	 СтруктураПараметров.Вставить("Отбор", СтруктураОтбора);
	 
	 СтруктураПараметров.Вставить("ТекущаяСтрока",	ТекСтрока.Талон);
	 
	 ФормаВыбора = ОткрытьФорму("Документ.ргТалон.ФормаВыбора", СтруктураПараметров, Элемент);
	 
 КонецПроцедуры
 
 &НаКлиенте
 // Процедура - обработчик события "ОбработкаВыбора" поля ввода "НомерТалона"
 // в строке табличной части "ТаблицаДанных".
 //
 Процедура ТаблицаДанныхНомерТалонаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	 
	 СтандартнаяОбработка = Ложь;
	 
	 Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ргТалон") Тогда
		 
		 ОбработатьВыборТалона(ВыбранноеЗначение);
		 
	 КонецЕсли;
	 
 КонецПроцедуры
 
 &НаКлиенте
 // Процедура - обработчик события "Очистка" поля ввода "НомерТалона"
 // в строке табличной части "ТаблицаДанных".
 //
 Процедура ТаблицаДанныхНомерТалонаОчистка(Элемент, СтандартнаяОбработка)
	 
	 СтандартнаяОбработка = Ложь;
	 
	 ТекСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
	 
	 ТекСтрока.НомерТалона	= "";
	 ТекСтрока.Талон			= Неопределено;
	 ТекСтрока.ФлагИзменений	= Истина;
	 
 КонецПроцедуры
 
 &НаКлиенте
 // Процедура - обработчик события "Открытие" поля ввода "НомерТалона"
 // в строке табличной части "ТаблицаДанных".
 //
 Процедура ТаблицаДанныхНомерТалонаОткрытие(Элемент, СтандартнаяОбработка)
	 
	 СтандартнаяОбработка = Ложь;
	 
	 ТекСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
	 Если ЗначениеЗаполнено(ТекСтрока.Талон) Тогда
		 ОткрытьФорму("Документ.ргТалон.ФормаОбъекта", Новый Структура("Ключ", ТекСтрока.Талон));
	 КонецЕсли;
	 
 КонецПроцедуры
 
 &НаСервереБезКонтекста
 Функция ПолучитьТаблицуОтходовНаДату(Полигон, Дата)
	 
	 Запрос = Новый Запрос;
	 
	 Запрос.Текст =
	 "ВЫБРАТЬ
	 |	РабочееМестоДиспетчераПолигонаОтходы.НомерСтрокиИнтерфейса,
	 |	РабочееМестоДиспетчераПолигонаОтходы.НомерСтрокиОтходы КАК НомерСтрокиОтходы,
	 |	РабочееМестоДиспетчераПолигонаОтходы.Номенклатура,
	 |	РабочееМестоДиспетчераПолигонаОтходы.Количество,
	 |	РабочееМестоДиспетчераПолигонаОтходы.ЕдиницаИзмерения,
	 |	РабочееМестоДиспетчераПолигонаОтходы.Коэффициент,
	 |	РабочееМестоДиспетчераПолигонаОтходы.Объем,
	 |	РабочееМестоДиспетчераПолигонаОтходы.Талон,
	 |	РабочееМестоДиспетчераПолигонаОтходы.Талон.Номер КАК НомерТалона
	 |ИЗ
	 |	РегистрСведений.ргРабочееМестоДиспетчераПолигонаОтходы КАК РабочееМестоДиспетчераПолигонаОтходы
	 |ГДЕ
	 |	РабочееМестоДиспетчераПолигонаОтходы.Дата = &Дата
	 |	И РабочееМестоДиспетчераПолигонаОтходы.Полигон = &Полигон
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	РабочееМестоДиспетчераПолигонаОтходы.НомерСтрокиИнтерфейса,
	 |	НомерСтрокиОтходы";
	 
	 Запрос.УстановитьПараметр("Дата",		Дата);
	 Запрос.УстановитьПараметр("Полигон",	Полигон);
	 
	 Возврат Запрос.Выполнить().Выгрузить();
	 
 КонецФункции
 
 &НаКлиенте
 // Процедура добавляет новую строку ТЧ "ТаблицаДанных"
 //
 //  Параметры:
 //   Вставить - булево
 //
 Процедура ДобавитьНовуюСтрокуОтходов(Ном=Неопределено)
	 
	 ТекСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
	 Если ТекСтрока <> Неопределено Тогда
		 
		 НоваяСтрока = Объект.ТаблицаОтходов.Добавить();
		 
		 НоваяСтрока.Количество				= 1;
		 НоваяСтрока.НомерСтрокиИнтерфейса	= ТекСтрока.НомерСтрокиИнтерфейса;
		 НоваяСтрока.НомерСтрокиОтходы		= 1;
		 Если ЗначениеЗаполнено(Ном) Тогда 
			 НоваяСтрока.Номенклатура = Ном;
		 КонецЕсли;
		 МИдентификаторПоследнейСтроки = НоваяСтрока.ПолучитьИдентификатор();
		 ПодключитьОбработчикОжидания("АктивироватьСтрокуОтходов",0.3,Истина);
		 
		 
		 ЭтаФорма.ТекущийЭлемент = Элементы.ТаблицаДанныхАвтомашина;
	 КонецЕсли;
	 
 КонецПроцедуры
 
  &НаКлиенте
  Процедура АктивироватьСтрокуОтходов()
	  Элементы.ТаблицаОтходов.ТекущаяСтрока = МИдентификаторПоследнейСтроки;  
  КонецПроцедуры
  
 &НаКлиенте
 // Функция возвращает массив структур колонок текущих строк отходов
 //
 Функция ПолучитьМассивСтрокОтходов(ТекСтрока)
	 
	 МассивСтрок = Новый Массив;
	 
	 МассивСтрокОтходов = Объект.ТаблицаОтходов.НайтиСтроки(Новый Структура("НомерСтрокиИнтерфейса", ТекСтрока.НомерСтрокиИнтерфейса));
	 Для Каждого СтрокаОтходов Из МассивСтрокОтходов Цикл
		 
		 СтруктураСтроки = Новый Структура;
		 
		 СтруктураСтроки.Вставить("НомерСтрокиИнтерфейса",	СтрокаОтходов.НомерСтрокиИнтерфейса);
		 СтруктураСтроки.Вставить("НомерСтрокиОтходы",		СтрокаОтходов.НомерСтрокиОтходы);
		 СтруктураСтроки.Вставить("Номенклатура",			СтрокаОтходов.Номенклатура);
		 СтруктураСтроки.Вставить("Количество",				СтрокаОтходов.Количество);
		 СтруктураСтроки.Вставить("ЕдиницаИзмерения",		СтрокаОтходов.ЕдиницаИзмерения);
		 СтруктураСтроки.Вставить("Коэффициент",				СтрокаОтходов.Коэффициент);
		 СтруктураСтроки.Вставить("Объем",					СтрокаОтходов.Объем);
		 СтруктураСтроки.Вставить("Талон",					СтрокаОтходов.Талон);
		 СтруктураСтроки.Вставить("НомерТалона",				СтрокаОтходов.НомерТалона);
		 
		 МассивСтрок.Добавить(СтруктураСтроки);
		 
	 КонецЦикла;	
	 
	 Возврат МассивСтрок;
	 
 КонецФункции
 
 &НаКлиенте
 Процедура СохранитьДанныеПриемаВКомпоненте(ТекСтрока)
	 
	 //Ответ = Вопрос("Записать данные на карту № " + ТекСтрока.ЭлектроннаяКарта, РежимДиалогаВопрос.ДаНет);
	 //Если Ответ = КодВозвратаДиалога.Нет Тогда
	 //	Возврат;
	 //КонецЕсли;
	 
	 ЗаписаноНаКарту = Ложь;
	 
	 ТекНомерКарты = "";
	 Попытка
		 ТекНомерКарты = ДрайверRFID.CardNumber;
	 Исключение
		 Сообщить(ОписаниеОшибки());
	 КонецПопытки;
	 Если Не ПустаяСтрока(ТекНомерКарты) Тогда
		 ЭлектроннаяКарта = НайтиЭлектроннуюКартуПоНомеру(ТекНомерКарты);
		 Если ЭлектроннаяКарта = ТекСтрока.ЭлектроннаяКарта Тогда
			 МассивСтрокОтходов = Объект.ТаблицаОтходов.НайтиСтроки(Новый Структура("НомерСтрокиИнтерфейса", ТекСтрока.НомерСтрокиИнтерфейса));
			 
			 МассивОбъем = новый массив;
			 МассивКодОтходов = новый массив;
			 МассивЦены = новый массив;
			 
			 Для Каждого СтрокаОтходов Из МассивСтрокОтходов Цикл
			     ДанныеДляОтправки = ПолучитьДанныеДляОтправки(ТекСтрока.ДатаЗаезда, ТекСтрока.ДоговорКонтрагента, СтрокаОтходов.Номенклатура, СтрокаОтходов.Коэффициент);
				 
				 МассивОбъем.Добавить(СтрокаОтходов.Объем*1000);
				 МассивКодОтходов.Добавить(ДанныеДляОтправки.КодОтходов);
				 //ТекНомерКарты
				 МассивЦены.Добавить(ДанныеДляОтправки.Цена);
				 КодДоговора = ДанныеДляОтправки.КодДоговора;//ТекСтрока.договорконтрагента.коддоговора;
				 Остаток = ДанныеДляОтправки.Остаток;
				 
				 
				 //Попытка
				 //    ЗаписаноНаКарту = мКомпонента.OperationFull(СтрокаОтходов.Объем*1000, ДанныеДляОтправки.КодОтходов, ТекНомерКарты, ДанныеДляОтправки.Цена, ДанныеДляОтправки.КодДоговора, ДанныеДляОтправки.Остаток);
				 //Исключение
				 //    ЗаписаноНаКарту = Ложь;
				 //    Сообщить(ОписаниеОшибки());
				 //КонецПопытки;
				 //Если Не ЗаписаноНаКарту Тогда
				 //    Прервать;
				 //КонецЕсли;
			 КонецЦикла;
			 
			 Попытка
			     ЗаписаноНаКарту = ДрайверRFID.OperationFullList(МассивОбъем, МассивКодОтходов, ТекНомерКарты, МассивЦены, КодДоговора, Остаток);
			 Исключение
			     ЗаписаноНаКарту = Ложь;
			     Сообщить(ОписаниеОшибки());
			 КонецПопытки;			 
		 Иначе
			 Сообщить("Карта установленная в ридер не соответствует карте " + ТекСтрока.ЭлектроннаяКарта);
		 КонецЕсли;
	 Иначе
		 Сообщить("Поместите карту в ридер");
	 КонецЕсли;
	 
	 Если ЗаписаноНаКарту Тогда
		 ТекСтрока.ФлагОбработки = Истина;
	 КонецЕсли;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура УстановитьОтборВТаблицеОтходов(ТекСтрока)
	 
	 СтруткураОтбора = Новый ФиксированнаяСтруктура("НомерСтрокиИнтерфейса", 0);
	 Если ТекСтрока <> Неопределено Тогда
		 СтруткураОтбора = Новый ФиксированнаяСтруктура("НомерСтрокиИнтерфейса", ТекСтрока.НомерСтрокиИнтерфейса);
	 КонецЕсли;
	 
	 Элементы.ТаблицаОтходов.ОтборСтрок = СтруткураОтбора;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ОбновитьНомераСтрокТаблицыОтходов(ТекСтрока)
	 
	 ы = 1;
	 
	 МассивСтрок = Объект.ТаблицаОтходов.НайтиСтроки(Новый Структура("НомерСтрокиИнтерфейса", ТекСтрока.НомерСтрокиИнтерфейса));
	 Для Каждого Строка Из МассивСтрок Цикл
		 
		 Строка.НомерСтрокиОтходы = ы;
		 
		 ы = ы + 1;
		 
	 КонецЦикла;	
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ОбновитьИтогПоОбъемуСтрокиТаблицыДанных(ТекСтрока)
	 
	 Если ТекСтрока = Неопределено Тогда
		 Возврат;
	 КонецЕсли;
	 
	 Объем = 0;
	 
	 МассивСтрок = Объект.ТаблицаОтходов.НайтиСтроки(Новый Структура("НомерСтрокиИнтерфейса", ТекСтрока.НомерСтрокиИнтерфейса));
	 Для Каждого Строка Из МассивСтрок Цикл
		 Объем = Объем + Строка.Объем;
	 КонецЦикла;	
	 
	 ТекСтрока.Объем			= Объем;
	 ТекСтрока.ФлагИзменений	= Истина;
	 
 КонецПроцедуры	
 
 &НаКлиенте
 Процедура ПодключитьКомпонентуРаботыСКартами()
	 
	 ДрайверRFID = Неопределено;
	 
	 Попытка
		 ДрайверRFID = Новый COMОбъект("FrontGate.Front1CClass");
	 Исключение
		 ДрайверRFID = Неопределено;
		 Сообщить("Не удалось подключить компоненту для работы с электронными картами" + Символы.ПС + "по причине: " + ОписаниеОшибки());
	 КонецПопытки;
	 
 КонецПроцедуры
 
 &НаСервереБезКонтекста
 Функция НайтиЭлектроннуюКартуПоНомеру(ТекНомерКарты)
	 
	 Возврат Справочники.ргЭлектронныеКарты.НайтиПоРеквизиту("НомерКарты", ТекНомерКарты);
	 
 КонецФункции
 
 
 Функция НоменклатураКарты(Карта)
 
 	Возврат Карта.Номенклатура;
 
 КонецФункции // НоменклатураКарты()
 
 
 &НаКлиенте
 Процедура ОбщиеДействияПриИзмененииЭлектроннойКарты()
	 
	 ТекСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
	 
	 // Обработка события изменения контрагента.
	 СтруктураДанные = ПолучитьДанныеЭлектроннаяКартаПриИзменении(ТекСтрока.ДатаЗаезда, ТекСтрока.ЭлектроннаяКарта);
	 
	 Если СтруктураДанные.Статус = ПредопределенноеЗначение("Перечисление.ргСтатусыЭлектронныхКарт.Выдана") Тогда
		 
		 ТекСтрока.Организация			= СтруктураДанные.Организация;
		 ТекСтрока.Контрагент			= СтруктураДанные.Контрагент;
		 ТекСтрока.ДоговорКонтрагента	= СтруктураДанные.Договор;
		 
		 Если ЗначениеЗаполнено(СтруктураДанные.Автомашина) Тогда
			 
			 ТекСтрока.Автомашина			= СтруктураДанные.Автомашина;
			 ТекСтрока.ГосударственныйНомер	= СтруктураДанные.ГосударственныйНомер;
			 
			 // Заполнение водителя
			 СтруктураДанных	= ргМодульВывозМусораСервер.ПолучитьДанныеАвтомашины(ТекСтрока.Автомашина, ТекСтрока.ДатаЗаезда);
			 
			 ТекСтрока.Водитель	= СтруктураДанных.Водитель;
			 
			 Если ЗначениеЗаполнено(СтруктураДанных.НоменклатураОтходов) Тогда
				 
				 ТекСтрокаОтходов = Элементы.ТаблицаОтходов.ТекущиеДанные;
				 Если ТекСтрокаОтходов <> Неопределено Тогда
					 
					 //Кучерявенко
					 //Сообщить(ТекСтрока.ЭлектроннаяКарта);
					 //Сообщить(ТипЗнч(ТекСтрока.ЭлектроннаяКарта));
					 НоменклатураКарты = НоменклатураКарты(ТекСтрока.ЭлектроннаяКарта); 
					 Если ЗначениеЗаполнено(НоменклатураКарты) Тогда
					     
					     ТекСтрокаОтходов.Номенклатура = НоменклатураКарты;						 
					     СтруктураЕдиницы = ргМодульВывозМусораСервер.ПолучитьСтруктуруЕдиницыИзмерения(НоменклатураКарты, СтруктураДанных.ВместимостьКузова);
					     
					     ТекСтрокаОтходов.ЕдиницаИзмерения		= СтруктураЕдиницы.ЕдиницаИзмерения;
					     ТекСтрокаОтходов.Коэффициент	= СтруктураЕдиницы.Коэффициент;
					     
					 Иначе
						 ТекСтрокаОтходов.Номенклатура		= СтруктураДанных.НоменклатураОтходов;
						 ТекСтрокаОтходов.ЕдиницаИзмерения	= СтруктураДанных.ЕдиницаОтходов;
						 ТекСтрокаОтходов.Коэффициент		= СтруктураДанных.КоэффициентОтходов;
						 
					 КонецЕсли;
					 
					 
					 ТекСтрокаОтходов.Количество			= 1;
					 
					 ТекСтрокаОтходов.Количество			= СтруктураДанных.ВместимостьКузова*0.2;
					 
					 ТекСтрокаОтходов.Объем				= ТекСтрокаОтходов.Количество * ТекСтрокаОтходов.Коэффициент;
					 
					 ОбновитьИтогПоОбъемуСтрокиТаблицыДанных(ТекСтрока);
					 
				 КонецЕсли;
				 
			 КонецЕсли;
			 
		 КонецЕсли;
		 ТекСтрока.ФлагИзменений	= Истина;
		 Если СтруктураДанные.ЛимитРасчетов > СтруктураДанные.ОстатокРасчетов Тогда
			 ТекстСообщения = "Остаток денежных средств по договору составляет " + Формат(СтруктураДанные.ОстатокРасчетов, "ЧДЦ=2; ЧН=0,00") +
			 " руб., что меньше установленного лимита по договору " + Формат(СтруктураДанные.ЛимитРасчетов, "ЧДЦ=2; ЧН=0,00") + " руб.";
			 Предупреждение(ТекстСообщения);
		 КонецЕсли;
	 Иначе
		 Предупреждение("Карта не выдана.");
		 ТекСтрока.ЭлектроннаяКарта = Неопределено;
	 КонецЕсли;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура УстановитьВидимость()
	 
	 ТекСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
	 
	 мТолькоПросмотр = Ложь;
	 Если ТекСтрока <> Неопределено И ТекСтрока.ФлагОбработки Тогда
		 мТолькоПросмотр = Истина;
	 КонецЕсли;
	 
	 Элементы.ВидОперации.ТолькоПросмотр			= мТолькоПросмотр;
	 Элементы.Номенклатура.ТолькоПросмотр		= мТолькоПросмотр;
	 Элементы.Контейнер.ТолькоПросмотр			= мТолькоПросмотр;
	 Элементы.Автомашина.ТолькоПросмотр			= мТолькоПросмотр;
	 Элементы.Водитель.ТолькоПросмотр			= мТолькоПросмотр;
	 Элементы.ПолигонПолучатель.ТолькоПросмотр	= мТолькоПросмотр;
	 Элементы.Организация.ТолькоПросмотр			= мТолькоПросмотр;
	 Элементы.Контрагент.ТолькоПросмотр			= мТолькоПросмотр;
	 Элементы.ДоговорКонтрагента.ТолькоПросмотр	= мТолькоПросмотр;
	 Элементы.ТаблицаОтходов.ТолькоПросмотр		= мТолькоПросмотр;
	 
 КонецПроцедуры
 
 &НаСервереБезКонтекста
 // Получает набор данных с сервера для процедуры ЕдиницаИзмеренияНачалоВыбораИзСписка.
 //
 Функция ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка(Номенклатура)
	 
	 СписокЕдиницаИзмерения = Новый СписокЗначений;
	 
	 СтруктураДанные = Новый Структура();
	 СтруктураДанные.Вставить("СписокЕдиницаИзмерения", СписокЕдиницаИзмерения);
	 
	 СписокЕдиницаИзмерения.Добавить(Номенклатура.ЕдиницаИзмерения, Номенклатура.ЕдиницаИзмерения.Наименование + " (ед. изм.)");
	 
	 МассивОтбора = Новый Массив;
	 МассивОтбора.Добавить(Номенклатура);
	 МассивОтбора.Добавить(Номенклатура.НоменклатурнаяГруппа);
	 
	 Родитель = Номенклатура.НоменклатурнаяГруппа.Родитель;
	 
	 Пока Истина Цикл
		 
		 Если НЕ ЗначениеЗаполнено(Родитель) Тогда
			 Прервать;
		 Иначе
			 МассивОтбора.Добавить(Родитель);
		 КонецЕсли;
		 
		 Родитель = Родитель.Родитель;
		 
	 КонецЦикла;	
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст =
	 "ВЫБРАТЬ РАЗЛИЧНЫЕ
	 |	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения
	 |ИЗ
	 |	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	 |ГДЕ
	 |	ЕдиницыИзмерения.Владелец В(&Номенклатура)";	
	 
	 Запрос.УстановитьПараметр("Номенклатура", МассивОтбора);
	 
	 Выборка = Запрос.Выполнить().Выбрать();
	 Пока Выборка.Следующий() Цикл
		 СписокЕдиницаИзмерения.Добавить(Выборка.ЕдиницаИзмерения);
	 КонецЦикла;
	 
	 Возврат СтруктураДанные;
	 
 КонецФункции // ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка()	
 
 &НаСервереБезКонтекста
 // Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
 //
 Функция ПолучитьДанныеЭлектроннаяКартаПриИзменении(Дата, ЭлектроннаяКарта)
	 
	 Возврат ргМодульВывозМусораСерверПроф.ПолучитьДанныеЭлектроннойКарты(Дата, ЭлектроннаяКарта);
	 
 КонецФункции	
 
 &НаСервереБезКонтекста
 Функция ПолучитьКодОтходов(Номенклатура)
	 
	 КодОтходов = 254;
	 Если ЗначениеЗаполнено(Номенклатура.ргТипТары) Тогда
		 Попытка
			 КодОтходов = Число(Номенклатура.ргТипТары.Код);
		 Исключение
			 КодОтходов = 254; // ТБО
		 КонецПопытки;
	 КонецЕсли;
	 
	 Возврат КодОтходов;
	 
 КонецФункции
 
 &НаСервереБезКонтекста
 Функция ПолучитьДанныеДляОтправки(Дата, Договор, Номенклатура, Коэффициент)
	 
	 ЦенаСтроки = 0;
	 Если ЗначениеЗаполнено(Договор.ВидЦен) Тогда
		 
		 СуммаВключаетНДС = ?(ЗначениеЗаполнено(Договор.ВидЦен), Договор.ВидЦен.ЦенаВключаетНДС, Истина);
		 
		 СтруктураДанных = Новый Структура;
		 СтруктураДанных.Вставить("ВидЦен",				Договор.ВидЦен);
		 СтруктураДанных.Вставить("СуммаВключаетНДС",	СуммаВключаетНДС);
		 СтруктураДанных.Вставить("ДатаОбработки",		Дата);
		 СтруктураДанных.Вставить("Номенклатура",		Номенклатура);
		 СтруктураДанных.Вставить("Характеристика",		Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		 СтруктураДанных.Вставить("Коэффициент",			1); // цена за единицу (м3)
		 СтруктураДанных.Вставить("ВалютаДокумента",		Договор.ВалютаРасчетов);
		 
		 ЦенаСтроки = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанных);
		 
	 КонецЕсли;
	 
	 СтруктураОстатка = ргМодульВывозМусораСерверПроф.ПолучитьОстатокРасчетовНаПолигоне(Дата+1, Договор.Организация, Договор.Владелец, Договор);
	 
	 СтруктураДанные = Новый Структура;
	 
	 СтруктураДанные.Вставить("КодДоговора",	Договор.Код);
	 СтруктураДанные.Вставить("Цена",		ЦенаСтроки);
	 СтруктураДанные.Вставить("Остаток",		СтруктураОстатка.ОстатокРасчетов);
	 СтруктураДанные.Вставить("КодОтходов",	ПолучитьКодОтходов(Номенклатура));
	 СтруктураДанные.Вставить("Коэффициент",	Коэффициент);
	 
	 Возврат СтруктураДанные;
	 
 КонецФункции
 
 &НаКлиенте
 Процедура КомандаПодключитьКомпонентуНажатие(Команда)
	 
	 ПодключитьКомпонентуРаботыСКартами();
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура КомандаОтключитьКомпонентуНажатие(Команда)
	 
	 ДрайверRFID = Неопределено;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура КомандаПолучитьНомерЭлектроннойКартыНажатие(Команда)
	 
	 Если ДрайверRFID = Неопределено Тогда
		 Сообщить("Компонента для работы с электронными картами не подключена");
		 Возврат;
	 КонецЕсли;
	 
	 ТекСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
	 Если ТекСтрока = Неопределено Тогда
		 Сообщить("Не активирована строка таблицы");
		 Возврат;
	 КонецЕсли;
	 
	 Если ЗначениеЗаполнено(ТекСтрока.ДокументСсылка) Тогда
		 ТекстВопроса = "Для текущей строки уже создан документ." + Символы.ПС + "Запись данных в эту строку может привести к потере информации." + Символы.ПС + "Продолжить?";
		 Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		 Если Ответ = КодВозвратаДиалога.Нет Тогда
			 Возврат;
		 КонецЕсли;
	 КонецЕсли;
	 
	 ТекНомерКарты = "";
	 Попытка
		 ТекНомерКарты = ДрайверRFID.CardNumber;
	 Исключение
		 Сообщить(ОписаниеОшибки());
	 КонецПопытки;
	 
	 Если Не ПустаяСтрока(ТекНомерКарты) Тогда
		 ЭлектроннаяКарта = НайтиЭлектроннуюКартуПоНомеру(ТекНомерКарты);
		 Если ЗначениеЗаполнено(ЭлектроннаяКарта) Тогда
			 ТекСтрока.ЭлектроннаяКарта = ЭлектроннаяКарта;
			 ОбщиеДействияПриИзмененииЭлектроннойКарты();
		 Иначе
			 Сообщить("Не найдена карта с номером " + ТекНомерКарты);
		 КонецЕсли;
		 Элементы.ФормаОтбитьЧек.Доступность = Ложь;
	 КонецЕсли;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура КомандаПечатьНажатие(Команда)
	 
	 ТекСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
	 
	 ОтказПользователя = Ложь;
	 Если ТекСтрока.ФлагИзменений Или Не ЗначениеЗаполнено(ТекСтрока.ДокументСсылка) Тогда
		 //Ответ = Вопрос("Перед печатью необходимо записать документ. Записать?", РежимДиалогаВопрос.ДаНет);
		 //Если Ответ = КодВозвратаДиалога.Нет Тогда
		 //	ОтказПользователя = Истина;
		 //Иначе
		 СохранитьДанные(,ОтказПользователя);
		 //ОтказПользователя = ТекСтрока.ФлагЗаполнения;
		 //КонецЕсли;
	 КонецЕсли;
	 
	 Если Не ОтказПользователя Тогда
		 ПараметрКоманды = Новый Массив;
		 ПараметрКоманды.Добавить(ТекСтрока.ДокументСсылка);
		 ПараметрыВыполненияКоманды = Новый Структура("Источник", ПолучитьФорму("Документ.ргОтражениеОперацииНаПолигоне.ФормаСписка"));
		 ДополнительныеОтчетыИОбработкиКлиент.ОткрытьФормуКомандДополнительныхОтчетовИОбработок(ПараметрКоманды, ПараметрыВыполненияКоманды, ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма());
		 ДобавитьНовуюСтроку();
		 ДобавитьНовуюСтрокуОтходов();
	 КонецЕсли;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ТаблицаДанныхЭлектроннаяКартаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	 
	 СтандартнаяОбработка = Ложь;
	 
	 ТекСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
	 
	 СтруктураОтбора = Новый Структура("Статус", ПредопределенноеЗначение("Перечисление.ргСтатусыЭлектронныхКарт.Выдана"));
	 Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
		 СтруктураОтбора.Вставить("Контрагент", ТекСтрока.Контрагент);
	 КонецЕсли;
	 Если ЗначениеЗаполнено(ТекСтрока.ДоговорКонтрагента) Тогда
		 СтруктураОтбора.Вставить("Договор", ТекСтрока.ДоговорКонтрагента);
	 КонецЕсли;
	 
	 СтруктураПараметров = Новый Структура;
	 СтруктураПараметров.Вставить("ТекущаяСтрока",	ТекСтрока.ЭлектроннаяКарта);
	 СтруктураПараметров.Вставить("Отбор",			СтруктураОтбора);
	 
	 ОткрытьФорму("Справочник.ргЭлектронныеКарты.ФормаВыбора", СтруктураПараметров, Элемент);
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ТаблицаДанныхЭлектроннаяКартаПриИзменении(Элемент)
	 
	 ОбщиеДействияПриИзмененииЭлектроннойКарты();
	 
 КонецПроцедуры
 
 ////////////////////////////////////////////////////////////////////////////////////////
 // ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "ТаблицаОтходов"
 
 &НаКлиенте
 // Процедура - обработчик события "ПередНачаломДобавления"
 // табличной части "ТаблицаОтходов".
 //
 Процедура ТаблицаОтходовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	 
	 Если Копирование Тогда
		 Отказ = Истина;
	 КонецЕсли;
	 
	 ТекСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
	 Если ТекСтрока = Неопределено Тогда
		 Отказ = Истина;
	 КонецЕсли;	
	 
 КонецПроцедуры
 
 &НаКлиенте
 // Процедура - обработчик события "ПриНачалеРедактирования"
 // табличной части "ТаблицаОтходов".
 //
 Процедура ТаблицаОтходовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	 
	 ТекСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
	 Если ТекСтрока = Неопределено Тогда
		 Предупреждение("Не определена строка таблицы данных.");
	 КонецЕсли;
	 
	 ТекСтрокаОтходов = Элементы.ТаблицаОтходов.ТекущиеДанные;
	 Если НоваяСтрока И Не Копирование Тогда
		 
		 // Заполнение строки таблицы данных
		 ТекСтрока.ФлагИзменений	= Истина;
		 
		 // Заполнение строки таблицы отходов
		 ТекСтрокаОтходов.Количество				= 1;
		 ТекСтрокаОтходов.НомерСтрокиИнтерфейса	= ТекСтрока.НомерСтрокиИнтерфейса;
		 
		 ОбновитьНомераСтрокТаблицыОтходов(ТекСтрока);
		 
	 КонецЕсли;	
	 
 КонецПроцедуры
 
 &НаКлиенте
 // Процедура - обработчик события "ПередУдалением"
 // табличной части "ТаблицаДанных".
 //
 Процедура ТаблицаОтходовПередУдалением(Элемент, Отказ)
	 
	 ТекСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
	 Если ТекСтрока = Неопределено Тогда
		 Предупреждение("Не определена строка таблицы данных.");
	 КонецЕсли;
	 
	 Ответ = Вопрос("Вы действительно хотите удалить строку", РежимДиалогаВопрос.ДаНет);
	 Если Ответ = КодВозвратаДиалога.Нет Тогда
		 Отказ = Истина;
	 КонецЕсли;
	 
	 Если Не Отказ Тогда
		 
		 // Заполнение строки таблицы данных
		 ТекСтрока.ФлагИзменений	= Истина;
		 
	 КонецЕсли;	
	 
 КонецПроцедуры
 
 &НаКлиенте
 // Процедура - обработчик события "ПослеУдаления"
 // табличной части "ТаблицаДанных".
 //
 Процедура ТаблицаОтходовПослеУдаления(Элемент)
	 
	 ТекСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
	 Если ТекСтрока = Неопределено Тогда
		 Предупреждение("Не определена строка таблицы отходов.");
	 КонецЕсли;
	 
	 ОбновитьИтогПоОбъемуСтрокиТаблицыДанных(ТекСтрока);
	 
	 ОбновитьНомераСтрокТаблицыОтходов(ТекСтрока);
	 
 КонецПроцедуры
 
 ////////////////////////////////////////////////////////////////////////////////////////
 // ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ "ТаблицаОтходов"
 
 &НаКлиенте
 // Процедура - обработчик события "ПриИзменении" поля ввода "Номенклатура"
 //
 Процедура ТаблицаОтходовНоменклатураПриИзменении(Элемент)
	 
	 ТекСтрока = Элементы.ТаблицаОтходов.ТекущиеДанные;
	 
	 // Определим единицу измерения
	 СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(ТекСтрока.Номенклатура);
	 
	 ТекСтрока.Количество		= 1;
	 ТекСтрока.ЕдиницаИзмерения	= СтруктураДанные.ЕдиницаИзмерения;
	 ТекСтрока.Коэффициент		= СтруктураДанные.Коэффициент;
	 ТекСтрока.Объем				= ТекСтрока.Количество * ТекСтрока.Коэффициент;
	 
	 ОбновитьИтогПоОбъемуСтрокиТаблицыДанных(Элементы.ТаблицаДанных.ТекущиеДанные);
	 
 КонецПроцедуры
 
 &НаКлиенте
 // Процедура - обработчик события "ПриИзменении" поля ввода "ЕдиницаИзмерения"
 //
 Процедура ТаблицаОтходовЕдиницаИзмеренияПриИзменении(Элемент)
	 
	 ТекСтрока = Элементы.ТаблицаОтходов.ТекущиеДанные;
	 
	 // Обработка события изменения единицы измерения.
	 СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекСтрока.ЕдиницаИзмерения);
	 
	 ТекСтрока.Коэффициент	= СтруктураДанные.Коэффициент;
	 ТекСтрока.Объем			= ТекСтрока.Количество * ТекСтрока.Коэффициент;
	 
	 ОбновитьИтогПоОбъемуСтрокиТаблицыДанных(Элементы.ТаблицаДанных.ТекущиеДанные);
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ТаблицаОтходовКоличествоПриИзменении(Элемент)
	 
	 ТекСтрока = Элементы.ТаблицаОтходов.ТекущиеДанные;
	 
	 ТекСтрока.Объем = ТекСтрока.Количество * ТекСтрока.Коэффициент;
	 
	 ОбновитьИтогПоОбъемуСтрокиТаблицыДанных(Элементы.ТаблицаДанных.ТекущиеДанные);
	 
 КонецПроцедуры
 
 &НаКлиенте
 // Процедура - обработчик события "НачалоВыбора" поля ввода "НомерТалона"
 // в строке табличной части "ТаблицаДанных".
 //
 Процедура ТаблицаОтходовНомерТалонаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	 
	 СтандартнаяОбработка = Ложь;
	 
	 ТекСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
	 СтруктураОтбора = Новый Структура;	
	 Если ЗначениеЗаполнено(ТекСтрока.Организация) Тогда
		 СтруктураОтбора.Вставить("Организация", ТекСтрока.Организация);
	 КонецЕсли;
	 
	 Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
		 СтруктураОтбора.Вставить("Контрагент", ТекСтрока.Контрагент);
	 КонецЕсли;
	 
	 Если (ТекСтрока.ВидОперацииНаПолигоне = ПараметрыВывозМусораПроф.ВидыОперацийНаПолигонеВвозМусора Или
		 ТекСтрока.ВидОперацииНаПолигоне = ПараметрыВывозМусораПроф.ВидыОперацийНаПолигонеПриемОтходов Или
		 ТекСтрока.ВидОперацииНаПолигоне = ПараметрыВывозМусораПроф.ВидыОперацийНаПолигонеПриемПоТалонам Или
		 ТекСтрока.ВидОперацииНаПолигоне = ПараметрыВывозМусораПроф.ВидыОперацийНаПолигонеПриемЗаНаличку) Тогда
		 СтруктураОтбора.Вставить("Полигон", Объект.Полигон);
	 ИначеЕсли (ТекСтрока.ВидОперацииНаПолигоне = ПараметрыВывозМусораПроф.ВидыОперацийНаПолигонеВывозМусора Или
		 ТекСтрока.ВидОперацииНаПолигоне = ПараметрыВывозМусораПроф.ВидыОперацийНаПолигонеУтилизацияОтходов) И
		 ЗначениеЗаполнено(ТекСтрока.ПолигонПолучатель) Тогда
		 СтруктураОтбора.Вставить("Полигон", ТекСтрока.ПолигонПолучатель);
	 КонецЕсли;
	 
	 СтруктураПараметров = Новый Структура;
	 СтруктураПараметров.Вставить("Отбор", СтруктураОтбора);
	 
	 ТекСтрокаОтходов = Элементы.ТаблицаОтходов.ТекущиеДанные;
	 СтруктураПараметров.Вставить("ТекущаяСтрока",	ТекСтрокаОтходов.Талон);
	 
	 ФормаВыбора = ОткрытьФорму("Документ.ргТалон.ФормаВыбора", СтруктураПараметров, Элемент);
	 
 КонецПроцедуры
 
 &НаКлиенте
 // Процедура - обработчик события "ОбработкаВыбора" поля ввода "НомерТалона"
 // в строке табличной части "ТаблицаДанных".
 //
 Процедура ТаблицаОтходовНомерТалонаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	 
	 СтандартнаяОбработка = Ложь;
	 
	 Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ргТалон") Тогда
		 
		 ТекСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
		 СтруктураТалона = ПолучитьДанныеПриИзмененииТалона(ВыбранноеЗначение, ТекСтрока.ВидОперацииНаПолигоне);
		 
		 ТекСтрока.ВидОперацииНаПолигоне	= ПредопределенноеЗначение("Перечисление.ргВидыОперацийНаПолигоне.ПриемПоТалонам");
		 ТекСтрока.Организация			= СтруктураТалона.Организация;
		 ТекСтрока.Контрагент			= СтруктураТалона.Контрагент;
		 ТекСтрока.ДоговорКонтрагента	= СтруктураТалона.ДоговорКонтрагента;
		 ТекСтрока.ПолигонПолучатель		= СтруктураТалона.ПолигонПолучатель;
		 ТекСтрока.ФлагИзменений			= Истина;
		 
		 ТекСтрокаОтходов = Элементы.ТаблицаОтходов.ТекущиеДанные;
		 
		 ТекСтрокаОтходов.Номенклатура		= СтруктураТалона.Номенклатура;
		 ТекСтрокаОтходов.ЕдиницаИзмерения	= СтруктураТалона.ЕдиницаИзмерения;
		 ТекСтрокаОтходов.Коэффициент		= СтруктураТалона.Коэффициент;
		 ТекСтрокаОтходов.Талон				= СтруктураТалона.Талон;
		 ТекСтрокаОтходов.НомерТалона		= СтруктураТалона.НомерТалона;
		 ТекСтрокаОтходов.Объем				= ТекСтрокаОтходов.Количество * ТекСтрокаОтходов.Коэффициент;
		 
		 ОбновитьИтогПоОбъемуСтрокиТаблицыДанных(ТекСтрока);
		 
	 КонецЕсли;
	 
 КонецПроцедуры
 
 &НаКлиенте
 // Процедура - обработчик события "Очистка" поля ввода "НомерТалона"
 // в строке табличной части "ТаблицаДанных".
 //
 Процедура ТаблицаОтходовНомерТалонаОчистка(Элемент, СтандартнаяОбработка)
	 
	 СтандартнаяОбработка = Ложь;
	 
	 ТекСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
	 ТекСтрока.ФлагИзменений	= Истина;
	 
	 ТекСтрокаОтходов = Элементы.ТаблицаОтходов.ТекущиеДанные;
	 ТекСтрокаОтходов.НомерТалона	= "";
	 ТекСтрокаОтходов.Талон			= Неопределено;
	 
 КонецПроцедуры
 
 &НаКлиенте
 // Процедура - обработчик события "Открытие" поля ввода "НомерТалона"
 // в строке табличной части "ТаблицаДанных".
 //
 Процедура ТаблицаОтходовНомерТалонаОткрытие(Элемент, СтандартнаяОбработка)
	 
	 СтандартнаяОбработка = Ложь;
	 
	 ТекСтрока = Элементы.ТаблицаОтходов.ТекущиеДанные;
	 Если ЗначениеЗаполнено(ТекСтрока.Талон) Тогда
		 ОткрытьФорму("Документ.ргТалон.ФормаОбъекта", Новый Структура("Ключ", ТекСтрока.Талон));
	 КонецЕсли;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ТаблицаОтходовНомерТалонаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	 
	 Если Не ПустаяСтрока(Текст) Тогда
		 
		 СписокТалонов = ргМодульВывозМусораСерверПроф.ПолучитьСписокТалоновПоШтрихКоду(Текст);
		 Если СписокТалонов.Количество() > 0 Тогда
			 
			 СтандартнаяОбработка = Ложь;
			 ДанныеВыбора = СписокТалонов;
			 
		 КонецЕсли;		
		 
	 КонецЕсли;	
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ТаблицаОтходовНомерТалонаПриИзменении(Элемент)
	 
	 //ТекСтрока = Элементы.ТаблицаОтходов.ТекущиеДанные;
	 //
	 //ТекСтрока.Талон			= Неопределено;
	 //ТекСтрока.НомерТалона	= "";
	 
 КонецПроцедуры
 
 
 &НаКлиенте
 Процедура СканироватьШтрихКод(Команда)
	 // Вставить содержимое обработчика.
	 Оповещение = Новый ОписаниеОповещения("ПослеСканирования",
	 ЭтаФорма);	
	 
	 ОткрытьФорму("ВнешняяОбработка.ргРабочееМестоДиспетчераПолигона.Форма.ВводШтрихКода",,,,,,Оповещение);
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ПослеСканирования(Результат,Параметры) Экспорт 
	 
	 //Сообщить(Результат);
	 Если ЗначениеЗаполнено(Результат) и ТипЗнч(Результат) = Тип("Строка") Тогда 
		 ШтрихКод = СокрЛП(Результат);
		 Если Лев(ШтрихКод, 3)="555" или Лев(ШтрихКод, 3)="444" Тогда 
			 КодАвто = Сред(ШтрихКод, 4);		
			 ТекСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
			 
			 СтруктураТалона = ОбработатьШтрихКодАвто(КодАвто);
			 ЗаполнитьЗначенияСвойств(ТекСтрока, СтруктураТалона);
			 Если ЗначениеЗаполнено(СтруктураТалона.ЭлектроннаяКарта) Тогда 
				 ОбщиеДействияПриИзмененииЭлектроннойКарты();
			 КонецЕсли;
			 //СохранитьДанные(Истина);
			 ДобавитьНовуюСтроку();
			 ДобавитьНовуюСтрокуОтходов();
			 
			 ЭтаФорма.ТекущийЭлемент = Элементы.ТаблицаДанныхАвтомашина;
		 КонецЕсли;
		 
		 Если Лев(ШтрихКод, 3)="777" Тогда 
			 КодАвто = Сред(СокрЛП(ШтрихКод), 4);		
			 ТекСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
			 ТекСтрокаОтходов = Элементы.ТаблицаОтходов.ТекущиеДанные;
			 
			 СтруктураТалона = ОбработатьШтрихКодАвтоСнег(КодАвто);
			 ЗаполнитьЗначенияСвойств(ТекСтрока, СтруктураТалона);
			 Если ТекСтрокаОтходов <> Неопределено Тогда
				 ЗаполнитьЗначенияСвойств(ТекСтрокаОтходов, СтруктураТалона);
			 КонецЕсли;
			 
			 
			 //Если ЗначениеЗаполнено(СтруктураТалона.ЭлектроннаяКарта) Тогда 
			 //	ОбщиеДействияПриИзмененииЭлектроннойКарты();
			 //КонецЕсли;
			 //СохранитьДанные(Истина);
			 //ДобавитьНовуюСтроку();
			 //ДобавитьНовуюСтрокуОтходов();
			 
			 ЭтаФорма.ТекущийЭлемент = Элементы.ТаблицаОтходовКоличество;
		 КонецЕсли;
		 
		 Если Лев(ШтрихКод, 3)="333" Тогда 
			 КодАвто = Сред(СокрЛП(ШтрихКод), 4);		
			 ТекСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
			 ТекСтрокаОтходов = Элементы.ТаблицаОтходов.ТекущиеДанные;
			 
			 СтруктураТалона = ОбработатьШтрихКодАвтоКирпич(КодАвто);
			 ЗаполнитьЗначенияСвойств(ТекСтрока, СтруктураТалона);
			 Если ТекСтрокаОтходов <> Неопределено Тогда
				 ЗаполнитьЗначенияСвойств(ТекСтрокаОтходов, СтруктураТалона);
			 КонецЕсли;
			 
			 
			 //Если ЗначениеЗаполнено(СтруктураТалона.ЭлектроннаяКарта) Тогда 
			 //	ОбщиеДействияПриИзмененииЭлектроннойКарты();
			 //КонецЕсли;
			 //СохранитьДанные(Истина);
			 //ДобавитьНовуюСтроку();
			 //ДобавитьНовуюСтрокуОтходов();
			 
			 ЭтаФорма.ТекущийЭлемент = Элементы.ТаблицаОтходовКоличество;
		 КонецЕсли;
		 Если Лев(ШтрихКод, 3)="123" Тогда 
			 КодАвто = Сред(СокрЛП(ШтрихКод), 4);		
			 ТекСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
			 ТекСтрокаОтходов = Элементы.ТаблицаОтходов.ТекущиеДанные;
			 
			 СтруктураТалона = ОбработатьШтрихКодАвтоМСО(КодАвто);
			 ЗаполнитьЗначенияСвойств(ТекСтрока, СтруктураТалона);
			 Если ТекСтрокаОтходов <> Неопределено Тогда
				 ЗаполнитьЗначенияСвойств(ТекСтрокаОтходов, СтруктураТалона);
			 КонецЕсли;
			 
			 
			 //Если ЗначениеЗаполнено(СтруктураТалона.ЭлектроннаяКарта) Тогда 
			 //	ОбщиеДействияПриИзмененииЭлектроннойКарты();
			 //КонецЕсли;
			 //СохранитьДанные(Истина);
			 //ДобавитьНовуюСтроку();
			 //ДобавитьНовуюСтрокуОтходов();
			 
			 ЭтаФорма.ТекущийЭлемент = Элементы.ТаблицаОтходовКоличество;
		 КонецЕсли;
		 
		 
	 КонецЕсли;
	 
 КонецПроцедуры
 
 &НаСервере
 Функция ОбработатьШтрихКодАвто(КодАвто) 
	 
	 
	 
	 СтруктураТалона = Новый Структура;
	 
	 СтруктураТалона.Вставить("ВидОперацииНаПолигоне", Перечисления.ргВидыОперацийНаПолигоне.ПриемОтходов);
	 
	 СтруктураТалона.Вставить("Автомашина",			Справочники.ргАвтомашины.НайтиПоКоду(КодАвто));
	 СтруктураТалона.Вставить("ГосударственныйНомер",СтруктураТалона.Автомашина.ГосударственныйНомер);
	 
	 СтруктураТалона.Вставить("Контрагент",			Справочники.Контрагенты.НайтиПоКоду("000000137"));  //Эко комплекс
	 //СтруктураТалона.Вставить("ДоговорКонтрагента",	Талон.ДоговорКонтрагента);
	 СтруктураТалона.Вставить("ПолигонПолучатель",	Объект.Полигон);
	 //СтруктураТалона.Вставить("Номенклатура",		Талон.Номенклатура);
	 //СтруктураТалона.Вставить("ЕдиницаИзмерения",	СтруктураЕдиницы.ЕдиницаИзмерения);
	 //СтруктураТалона.Вставить("Коэффициент",			СтруктураЕдиницы.Коэффициент);
	 //СтруктураТалона.Вставить("Талон",				Талон);
	 //СтруктураТалона.Вставить("НомерТалона",			Талон.Номер);
	 СтруктураТалона.Вставить("ФлагИзменений",		Истина);
	 
	 //ЗаполнитьЗначенияСвойств(ТекСтрока, СтруктураТалона);
	 
	 З = Новый Запрос;
	 З.Текст = "ВЫБРАТЬ
	 |	ргСтатусыЭлектронныхКартСрезПоследних.ЭлектроннаяКарта,
	 |	ргСтатусыЭлектронныхКартСрезПоследних.Период КАК Период
	 |ИЗ
	 |	РегистрСведений.ргСтатусыЭлектронныхКарт.СрезПоследних(
	 |			&ТекДата,
	 |			Статус = &Статус
	 |				И Автомашина = &Авто) КАК ргСтатусыЭлектронныхКартСрезПоследних
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	Период УБЫВ
	 |АВТОУПОРЯДОЧИВАНИЕ";
	 
	 З.УстановитьПараметр("ТекДата", Объект.Дата);
	 З.УстановитьПараметр("Статус", Перечисления.ргСтатусыЭлектронныхКарт.Выдана);
	 З.УстановитьПараметр("Авто",СтруктураТалона.Автомашина);
	 Выборка = З.Выполнить().Выбрать();
	 
	 СтруктураТалона.Вставить("ЭлектроннаяКарта", Неопределено); 
	 Если Выборка.Следующий() Тогда 
		 СтруктураТалона.Вставить("ЭлектроннаяКарта", Выборка.ЭлектроннаяКарта); 
	 КонецЕсли;
	 
	 Возврат СтруктураТалона;
	 
 КонецФункции
 &НаСервере
 Функция ОбработатьШтрихКодАвтоСнег(КодАвто) 
	 
	 
	 
	 СтруктураТалона = Новый Структура;
	 
	 СтруктураТалона.Вставить("ВидОперацииНаПолигоне", Перечисления.ргВидыОперацийНаПолигоне.ПриемПоТалонам);
	 
	 СтруктураТалона.Вставить("Автомашина",			Справочники.ргАвтомашины.найтиПоКоду("#00000002"));
	 СтруктураТалона.Вставить("ГосударственныйНомер","");
	 
	 СтруктураТалона.Вставить("Контрагент",			Справочники.Контрагенты.НайтиПоКоду("ВМ-001951"));  //Эко комплекс - СНЕГ БЫЛ
	 СтруктураТалона.Вставить("Контрагент",			Справочники.Контрагенты.НайтиПоКоду("ВМ-002458"));  //МСО_2018
	 
	 
	                                                               
	 СтруктураТалона.Вставить("Организация", мОрганизация);
	 
	 СтруктураТалона.Вставить("ДоговорКонтрагента", Неопределено);
	 СтруктураТалона.Вставить("Номенклатура", Неопределено);
	 
	 Выборка= Справочники.ДоговорыКонтрагентов.Выбрать(,СтруктураТалона.Контрагент);
	 Пока Выборка.Следующий() Цикл 
		 Если Найти(Выборка.Ссылка.Код, КодАвто) Тогда 
			 СтруктураТалона.Вставить("ДоговорКонтрагента",	Выборка.Ссылка);	
		 КонецЕсли;	
	 КонецЦикла;
	 Если ЗначениеЗаполнено(СтруктураТалона.ДоговорКонтрагента) Тогда 	
		 СтруктураТалона.Вставить("Номенклатура",        СтруктураТалона.ДоговорКонтрагента.ргВидРабот);
		 
		 СтруктураЕдиницы = ргМодульВывозМусораСервер.ПолучитьСтруктуруЕдиницыИзмерения(СтруктураТалона.ДоговорКонтрагента.ргВидРабот, 1);
		 СтруктураТалона.Вставить("ЕдиницаИзмерения",	СтруктураЕдиницы.ЕдиницаИзмерения);
		 СтруктураТалона.Вставить("Коэффициент",			СтруктураЕдиницы.Коэффициент);
		 
		 
	 КонецЕсли;
	 
	 СтруктураТалона.Вставить("ПолигонПолучатель",	Объект.Полигон);
	 //СтруктураТалона.Вставить("Номенклатура",		Талон.Номенклатура);
	 //СтруктураТалона.Вставить("ЕдиницаИзмерения",	СтруктураЕдиницы.ЕдиницаИзмерения);
	 //СтруктураТалона.Вставить("Коэффициент",			СтруктураЕдиницы.Коэффициент);
	 //СтруктураТалона.Вставить("Талон",				Талон);
	 //СтруктураТалона.Вставить("НомерТалона",			Талон.Номер);
	 СтруктураТалона.Вставить("ФлагИзменений",		Истина);
	 
	 //ЗаполнитьЗначенияСвойств(ТекСтрока, СтруктураТалона);
	 
	 З = Новый Запрос;
	 З.Текст = "ВЫБРАТЬ
	 |	ргСтатусыЭлектронныхКартСрезПоследних.ЭлектроннаяКарта,
	 |	ргСтатусыЭлектронныхКартСрезПоследних.Период КАК Период
	 |ИЗ
	 |	РегистрСведений.ргСтатусыЭлектронныхКарт.СрезПоследних(
	 |			&ТекДата,
	 |			Статус = &Статус
	 |				И Автомашина = &Авто) КАК ргСтатусыЭлектронныхКартСрезПоследних
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	Период УБЫВ
	 |АВТОУПОРЯДОЧИВАНИЕ";
	 
	 З.УстановитьПараметр("ТекДата", Объект.Дата);
	 З.УстановитьПараметр("Статус", Перечисления.ргСтатусыЭлектронныхКарт.Выдана);
	 З.УстановитьПараметр("Авто",СтруктураТалона.Автомашина);
	 Выборка = З.Выполнить().Выбрать();
	 
	 СтруктураТалона.Вставить("ЭлектроннаяКарта", Неопределено); 
	 Если Выборка.Следующий() Тогда 
		 СтруктураТалона.Вставить("ЭлектроннаяКарта", Выборка.ЭлектроннаяКарта); 
	 КонецЕсли;
	 
	 Возврат СтруктураТалона;
	 
 КонецФункции
 &НаСервере
 Функция ОбработатьШтрихКодАвтоКирпич(КодАвто) 
	 
	 
	 
	 СтруктураТалона = Новый Структура;
	 
	 СтруктураТалона.Вставить("ВидОперацииНаПолигоне", Перечисления.ргВидыОперацийНаПолигоне.ПриемПоТалонам);
	 
	 СтруктураТалона.Вставить("Автомашина",			Справочники.ргАвтомашины.найтиПоКоду("#00000002"));
	 СтруктураТалона.Вставить("ГосударственныйНомер","");
	 
	 СтруктураТалона.Вставить("Контрагент",			Справочники.Контрагенты.НайтиПоКоду("ВМ-001964"));  //ПОЛИГОН ТБО СЛУЖЕБНЫЙ
	 
	 
	 СтруктураТалона.Вставить("Организация", мОрганизация);
	 
	 СтруктураТалона.Вставить("ДоговорКонтрагента", Неопределено);
	 СтруктураТалона.Вставить("Номенклатура", Неопределено);
	 
	 Выборка= Справочники.ДоговорыКонтрагентов.Выбрать(,СтруктураТалона.Контрагент);
	 Пока Выборка.Следующий() Цикл 
		 Если Найти(Выборка.Ссылка.Код, КодАвто) Тогда 
			 СтруктураТалона.Вставить("ДоговорКонтрагента",	Выборка.Ссылка);	
		 КонецЕсли;	
	 КонецЦикла;
	 Если ЗначениеЗаполнено(СтруктураТалона.ДоговорКонтрагента) Тогда 	
		 СтруктураТалона.Вставить("Номенклатура",        СтруктураТалона.ДоговорКонтрагента.ргВидРабот);
		 
		 СтруктураЕдиницы = ргМодульВывозМусораСервер.ПолучитьСтруктуруЕдиницыИзмерения(СтруктураТалона.ДоговорКонтрагента.ргВидРабот, 1);
		 СтруктураТалона.Вставить("ЕдиницаИзмерения",	СтруктураЕдиницы.ЕдиницаИзмерения);
		 СтруктураТалона.Вставить("Коэффициент",			СтруктураЕдиницы.Коэффициент);
		 
		 
	 КонецЕсли;
	 
	 СтруктураТалона.Вставить("ПолигонПолучатель",	Объект.Полигон);
	 //СтруктураТалона.Вставить("Номенклатура",		Талон.Номенклатура);
	 //СтруктураТалона.Вставить("ЕдиницаИзмерения",	СтруктураЕдиницы.ЕдиницаИзмерения);
	 //СтруктураТалона.Вставить("Коэффициент",			СтруктураЕдиницы.Коэффициент);
	 //СтруктураТалона.Вставить("Талон",				Талон);
	 //СтруктураТалона.Вставить("НомерТалона",			Талон.Номер);
	 СтруктураТалона.Вставить("ФлагИзменений",		Истина);
	 
	 //ЗаполнитьЗначенияСвойств(ТекСтрока, СтруктураТалона);
	 
	 З = Новый Запрос;
	 З.Текст = "ВЫБРАТЬ
	 |	ргСтатусыЭлектронныхКартСрезПоследних.ЭлектроннаяКарта,
	 |	ргСтатусыЭлектронныхКартСрезПоследних.Период КАК Период
	 |ИЗ
	 |	РегистрСведений.ргСтатусыЭлектронныхКарт.СрезПоследних(
	 |			&ТекДата,
	 |			Статус = &Статус
	 |				И Автомашина = &Авто) КАК ргСтатусыЭлектронныхКартСрезПоследних
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	Период УБЫВ
	 |АВТОУПОРЯДОЧИВАНИЕ";
	 
	 З.УстановитьПараметр("ТекДата", Объект.Дата);
	 З.УстановитьПараметр("Статус", Перечисления.ргСтатусыЭлектронныхКарт.Выдана);
	 З.УстановитьПараметр("Авто",СтруктураТалона.Автомашина);
	 Выборка = З.Выполнить().Выбрать();
	 
	 СтруктураТалона.Вставить("ЭлектроннаяКарта", Неопределено); 
	 Если Выборка.Следующий() Тогда 
		 СтруктураТалона.Вставить("ЭлектроннаяКарта", Выборка.ЭлектроннаяКарта); 
	 КонецЕсли;
	 
	 Возврат СтруктураТалона;
	 
 КонецФункции
 &НаСервере
 Функция ОбработатьШтрихКодАвтоМСО(КодАвто) 
	 
	 
	 
	 СтруктураТалона = Новый Структура;
	 
	 СтруктураТалона.Вставить("ВидОперацииНаПолигоне", Перечисления.ргВидыОперацийНаПолигоне.ПриемПоТалонам);
	 
	 СтруктураТалона.Вставить("Автомашина",			Справочники.ргАвтомашины.найтиПоКоду("#00000002"));
	 СтруктураТалона.Вставить("ГосударственныйНомер","");
	 
	 СтруктураТалона.Вставить("Контрагент",			Справочники.Контрагенты.НайтиПоКоду("ВМ-000711"));  //МСО
	 
	 
	 СтруктураТалона.Вставить("Организация", мОрганизация);
	 
	 СтруктураТалона.Вставить("ДоговорКонтрагента", Неопределено);
	 СтруктураТалона.Вставить("Номенклатура", Неопределено);
	 
	 Выборка= Справочники.ДоговорыКонтрагентов.Выбрать(,СтруктураТалона.Контрагент);
	 Пока Выборка.Следующий() Цикл 
		 Если Найти(Выборка.Ссылка.Код, КодАвто) Тогда 
			 СтруктураТалона.Вставить("ДоговорКонтрагента",	Выборка.Ссылка);	
		 КонецЕсли;	
	 КонецЦикла;
	 Если ЗначениеЗаполнено(СтруктураТалона.ДоговорКонтрагента) Тогда 	
		 СтруктураТалона.Вставить("Номенклатура",        СтруктураТалона.ДоговорКонтрагента.ргВидРабот);
		 
		 СтруктураЕдиницы = ргМодульВывозМусораСервер.ПолучитьСтруктуруЕдиницыИзмерения(СтруктураТалона.ДоговорКонтрагента.ргВидРабот, 1);
		 СтруктураТалона.Вставить("ЕдиницаИзмерения",	СтруктураЕдиницы.ЕдиницаИзмерения);
		 СтруктураТалона.Вставить("Коэффициент",			СтруктураЕдиницы.Коэффициент);
		 
		 
	 КонецЕсли;
	 
	 СтруктураТалона.Вставить("ПолигонПолучатель",	Объект.Полигон);
	 //СтруктураТалона.Вставить("Номенклатура",		Талон.Номенклатура);
	 //СтруктураТалона.Вставить("ЕдиницаИзмерения",	СтруктураЕдиницы.ЕдиницаИзмерения);
	 //СтруктураТалона.Вставить("Коэффициент",			СтруктураЕдиницы.Коэффициент);
	 //СтруктураТалона.Вставить("Талон",				Талон);
	 //СтруктураТалона.Вставить("НомерТалона",			Талон.Номер);
	 СтруктураТалона.Вставить("ФлагИзменений",		Истина);
	 
	 //ЗаполнитьЗначенияСвойств(ТекСтрока, СтруктураТалона);
	 
	 З = Новый Запрос;
	 З.Текст = "ВЫБРАТЬ
	 |	ргСтатусыЭлектронныхКартСрезПоследних.ЭлектроннаяКарта,
	 |	ргСтатусыЭлектронныхКартСрезПоследних.Период КАК Период
	 |ИЗ
	 |	РегистрСведений.ргСтатусыЭлектронныхКарт.СрезПоследних(
	 |			&ТекДата,
	 |			Статус = &Статус
	 |				И Автомашина = &Авто) КАК ргСтатусыЭлектронныхКартСрезПоследних
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	Период УБЫВ
	 |АВТОУПОРЯДОЧИВАНИЕ";
	 
	 З.УстановитьПараметр("ТекДата", Объект.Дата);
	 З.УстановитьПараметр("Статус", Перечисления.ргСтатусыЭлектронныхКарт.Выдана);
	 З.УстановитьПараметр("Авто",СтруктураТалона.Автомашина);
	 Выборка = З.Выполнить().Выбрать();
	 
	 СтруктураТалона.Вставить("ЭлектроннаяКарта", Неопределено); 
	 Если Выборка.Следующий() Тогда 
		 СтруктураТалона.Вставить("ЭлектроннаяКарта", Выборка.ЭлектроннаяКарта); 
	 КонецЕсли;
	 
	 Возврат СтруктураТалона;
	 
 КонецФункции
 
 
 &НаКлиенте
 Процедура СохранитьСтр(Команда)
	 Отказ = Ложь;
	 СохранитьДанные(, Отказ);
	 Если Не Отказ Тогда 
		 //уже есть пустая строка?
		 Если Объект.ТаблицаДанных.Получить(Объект.ТаблицаДанных.Количество()-1).ГосударственныйНомер="" Тогда
			//Не нужно добавлять позиционируемся на ней
			 Элементы.ТаблицаДанных.ТекущаяСтрока = Объект.ТаблицаДанных.Получить(Объект.ТаблицаДанных.Количество()-1).ПолучитьИдентификатор();
			 ТаблицаДанныхПриАктивизацииСтроки("");	
			 
		 Иначе
			 ДобавитьНовуюСтроку();
			 ДобавитьНовуюСтрокуОтходов();
			 Элементы.ФормаОтбитьЧек.Доступность = Истина;
		 КонецЕсли;
		
	 КонецЕсли;
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ТаблицаДанныхГосударственныйНомерПриИзменении(Элемент)
	 Если Найти(Строка(Элементы.ТаблицаДанных.ТекущиеДанные.Автомашина), "ЧУЖОЙ") Тогда
		 ЭтаФорма.ТекущийЭлемент = Элементы.ТаблицаДанныхАдресКонтрагента;
	 Иначе
		 ЭтаФорма.ТекущийЭлемент = Элементы.ТаблицаОтходовНомерТалона;
	 КонецЕсли;
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ТаблицаДанныхАдресКонтрагентаПриИзменении(Элемент)
	 // Вставить содержимое обработчика.
	 Если Найти(Строка(Элементы.ТаблицаДанных.ТекущиеДанные.Автомашина), "ЧУЖОЙ") Тогда
		 ЭтаФорма.ТекущийЭлемент =  Элементы.ТаблицаОтходовКоличество;
	 КонецЕсли;
 КонецПроцедуры
 
 &НаСервере
 Функция ПроверитьТалоны(МассивСтрокОтходы)
	 Если МассивСтрокОтходы.Количество()=1 или МассивСтрокОтходы.Количество()=0 Тогда 
		 Возврат Ложь;	
	 КонецЕсли;
	 
	 мКонтрагент1 = Неопределено;	
	 Для Каждого СтрокаТ из МассивСтрокОтходы Цикл 
		 Если ЗначениеЗаполнено(СтрокаТ.Талон) Тогда 
			 Контрагент1 = СтрокаТ.Талон.Контрагент; 
			 Если мКонтрагент1=Неопределено Тогда 
				 мКонтрагент1 = Контрагент1;
			 КонецЕсли;
			 Если мКонтрагент1 <> Контрагент1 Тогда 
				 Возврат Истина;
			 КонецЕсли;
		 КонецЕсли;
	 КонецЦикла;
	 
	 Возврат Ложь;
	 
 КонецФункции
 
 &НаКлиенте
 Процедура АнализДокументов(Команда)
	 ПараметрыОткрытия = Новый Структура;
	 ПараметрыОткрытия.Вставить("Дата", Объект.Дата);
	 ОткрытьФорму("ВнешняяОбработка.ргРабочееМестоДиспетчераПолигона.Форма.ФормаАнализДокументов", ПараметрыОткрытия, ЭтаФорма);
	 //ОткрытьФорму("ВнешняяОбработка.ргРабочееМестоДиспетчераПолигона.Форма.ФормаАнализДокументов",ПараметрыОткрытия);
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ЧекККМ_Журнал(Команда)
	 ФормаЖурнала = ПолучитьФорму("ЖурналДокументов.ЧекиККМ.Форма.ФормаСписка");
	 ФормаЖурнала.Открыть();
	 
 КонецПроцедуры
 
 &НаСервере
 Функция  ОтбитьЧекНаСервере()
	 // Вставить содержимое обработчика.
	 Структура = Новый Структура;
	 КассаККМ = Справочники.КассыККМ.НайтиПоНаименованию("Фискальный регистратор (Полигон )");
	 Структура.Вставить("КассаККМ", КассаККМ);
	 Возврат Структура;
 КонецФункции
 
 &НаКлиенте
 Процедура ОтбитьЧек(Команда)
	 Структура = ОтбитьЧекНаСервере();
	 Форма = ОткрытьФорму("Документ.ЧекККМ.Форма.ФормаДокумента",,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	 ОбъектЧек = Форма.Объект;
	 Если Не ЗначениеЗаполнено(ОбъектЧек.КассаККМ) Тогда 
		 ОбъектЧек.КассаККМ = Структура.КассаККМ;	
	 КонецЕсли;
	 Форма.КассаККМПриИзменении(Форма.Элементы.КассаККМ);
	 
	 ОбъектЧек.Контрагент = Элементы.ТаблицаДанных.ТекущиеДанные.Контрагент;	
	 ЭлНомерСтрокиИнтерфейса = Элементы.ТаблицаДанных.ТекущиеДанные.НомерСтрокиИнтерфейса;
	 
	 Сум = 0;
	 
	 Для Каждого СтрокАТ ИЗ Объект.ТаблицаОтходов Цикл
		 Если СтрокАТ.НомерСтрокиИнтерфейса = ЭлНомерСтрокиИнтерфейса Тогда 
			 СтрокаДоб = ОбъектЧек.Запасы.Добавить();
			 СтрокаДоб.Номенклатура = СтрокАТ.Номенклатура;
			 СтрокаДоб.Количество = СтрокаТ.Количество;
			 
			 ////
			 СтрокаТабличнойЧасти = СтрокаДоб;
			 
			 СтруктураДанные = Новый Структура();
			 СтруктураДанные.Вставить("Организация", ОбъектЧек.Организация);
			 СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
			 СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
			 СтруктураДанные.Вставить("НалогообложениеНДС", ОбъектЧек.НалогообложениеНДС);
			 
			 Если ЗначениеЗаполнено(ОбъектЧек.ВидЦен) Тогда
				 
				 СтруктураДанные.Вставить("ДатаОбработки", ОбъектЧек.Дата);
				 СтруктураДанные.Вставить("ВалютаДокумента", ОбъектЧек.ВалютаДокумента);
				 СтруктураДанные.Вставить("СуммаВключаетНДС", ОбъектЧек.СуммаВключаетНДС);
				 СтруктураДанные.Вставить("ВидЦен", ОбъектЧек.ВидЦен);
				 СтруктураДанные.Вставить("Коэффициент", 1);
				 СтруктураДанные.Вставить("Содержание", "");
				 СтруктураДанные.Вставить("ВидСкидкиНаценки", ОбъектЧек.ВидСкидкиНаценки);
				 
			 КонецЕсли;
			 
			 // ДисконтныеКарты
			 СтруктураДанные.Вставить("ДисконтнаяКарта", ОбъектЧек.ДисконтнаяКарта);
			 СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", ОбъектЧек.ПроцентСкидкиПоДисконтнойКарте);		
			 // Конец ДисконтныеКарты
			 Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда 
				 СтруктураДанные = ПолучитьДанныеНоменклатураПриИзмененииККМ(СтруктураДанные);
				 
				 СтрокаТабличнойЧасти.ЕдиницаИзмерения 	= СтрокАТ.ЕдиницаИзмерения;
				 СтрокаТабличнойЧасти.Количество 		= СтрокАТ.Количество;
				 СтрокаТабличнойЧасти.КоличествоОбъем   = СтрокаТ.Коэффициент;
				 //СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
				 СтрокаТабличнойЧасти.Цена = СтрокАТ.Коэффициент*СтруктураДанные.Цена;
				 СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
				 СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
				 СтрокаТабличнойЧасти.НеобходимостьВводаАкцизнойМарки = СтруктураДанные.НеобходимостьВводаАкцизнойМарки;
				 
			 КонецЕсли;
			 
			 Форма.РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
			 
			 Сум = Сум+СтрокаТабличнойЧасти.Сумма;
			 //
			 ////Серийные номера
			 //Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
			 //	ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
			 //	РаботаССерийнымиНомерамиКлиентСервер.УдалитьСерийныеНомераПоКлючуСвязи(Объект.СерийныеНомера, ТекущиеДанныеСтроки,,ИспользоватьСерийныеНомераОстатки);
			 //КонецЦикла;
			 //
			 //ОткрытьВводАкцизнойМарки(СтрокаТабличнойЧасти);
			 
		 КонецЕсли;
	 КонецЦикла;
	 
	 ОбъектЧек.СуммаДокумента = Сум;
	 ОбъектЧек.ПолученоНаличными = Сум;
	 Форма.ТекущийЭлемент = Форма.Элементы.ПолученоНаличными;
	 
 КонецПроцедуры
 &НаКлиенте
 Процедура ФормаЧекаЗакрыта(Результат,Параметры) Экспорт 
	 КомандаПечатьНажатие("");	
 КонецПроцедуры
 
 &НаСервереБезКонтекста
 Функция ПолучитьДанныеНоменклатураПриИзмененииККМ(СтруктураДанные)
	 
	 СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	 
	 СтруктураДанные.Вставить(
	 "Содержание",
	 УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
	 ?(ЗначениеЗаполнено(СтруктураДанные.Номенклатура.НаименованиеПолное),
	 СтруктураДанные.Номенклатура.НаименованиеПолное, СтруктураДанные.Номенклатура.Наименование),
	 СтруктураДанные.Характеристика, СтруктураДанные.Номенклатура.Артикул)
	 );
	 
	 Если СтруктураДанные.Свойство("НалогообложениеНДС") 
		 И НЕ СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		 
		 Если СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			 СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		 Иначе
			 СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
		 КонецЕсли;	
		 
	 ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.СтавкаНДС) Тогда
		 СтруктураДанные.Вставить("СтавкаНДС", СтруктураДанные.Номенклатура.СтавкаНДС);
	 Иначе
		 СтруктураДанные.Вставить("СтавкаНДС", СтруктураДанные.Организация.СтавкаНДСПоУмолчанию);
	 КонецЕсли;	
	 
	 Если СтруктураДанные.Свойство("ВидЦен") Тогда
		 Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		 СтруктураДанные.Вставить("Цена", Цена);
	 Иначе
		 СтруктураДанные.Вставить("Цена", 0);
	 КонецЕсли;
	 
	 Если СтруктураДанные.Свойство("ВидСкидкиНаценки") 
		 И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки) Тогда
		 СтруктураДанные.Вставить("ПроцентСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки.Процент);
	 Иначе	
		 СтруктураДанные.Вставить("ПроцентСкидкиНаценки", 0);
	 КонецЕсли;
	 
	 Если СтруктураДанные.Свойство("ПроцентСкидкиПоДисконтнойКарте") 
		 И ЗначениеЗаполнено(СтруктураДанные.ДисконтнаяКарта) Тогда
		 ТекПроцент = СтруктураДанные.ПроцентСкидкиНаценки;
		 СтруктураДанные.Вставить("ПроцентСкидкиНаценки", ТекПроцент + СтруктураДанные.ПроцентСкидкиПоДисконтнойКарте);
	 КонецЕсли;
	 
	 СтруктураДанные.Вставить("НеобходимостьВводаАкцизнойМарки", СтруктураДанные.Номенклатура.ВидАлкогольнойПродукции.Маркируемый);
	 
	 Возврат СтруктураДанные;
	 
 КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()
 
 &НаКлиенте
 Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	 
	 Если ТипЗнч(НовыйОбъект) = Тип("ДокументСсылка.ЧекККМ") Тогда 
		 КомандаПечатьНажатие(Неопределено);	
	 КонецЕсли;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ТаблицаДанныхАдресКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	 
	 СтандартнаяОбработка = Ложь;
	 
	 Если ВыбранноеЗначение = Неопределено Тогда
		 Возврат;
	 КонецЕсли;
	 
	 Если ВыбранноеЗначение.Свойство("Отказ") И ВыбранноеЗначение.Отказ = Истина Тогда
		 Если НЕ ПустаяСтрока(ВыбранноеЗначение.КраткоеПредставлениеОшибки) Тогда
			 ПоказатьПредупреждение(, ВыбранноеЗначение.КраткоеПредставлениеОшибки);
		 КонецЕсли;
		 Возврат;
	 КонецЕсли;
	 
	 Модифицированность = Истина;
	 ТипВыбора = ТипЗнч(ВыбранноеЗначение);
	 Если ТипВыбора = Тип("Структура") Тогда
		 //Если ВыбранноеЗначение.Свойство("НаселенныйПунктДетально") Тогда
		 //	// Результат автоподбора или выбора кнопкой, берем все оттуда.
		 //	НаселенныйПунктДетально = ВыбранноеЗначение.НаселенныйПунктДетально;
		 //Иначе
		 //	НаселенныйПунктДетально.Улица.Представление = ВыбранноеЗначение.Улица;
		 //	НаселенныйПунктДетально.ДополнительныйЭлемент.Представление = ВыбранноеЗначение.ДополнительныйЭлемент;
		 //	
		 //	Если ЗначениеЗаполнено(ВыбранноеЗначение.ДополнительныйЭлемент) Тогда
		 //		НаименованиеСокращение = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ВыбранноеЗначение.ДополнительныйЭлемент);
		 //		НаселенныйПунктДетально.ДополнительныйЭлемент.ПутьXPath = УправлениеКонтактнойИнформациейКлиентСервер.XPathДополнительногоОбъектаАдресации(90, НаименованиеСокращение.Сокращение);
		 //	КонецЕсли;
		 //	НаселенныйПунктДетально.ПодчиненныйЭлемент.Представление = ВыбранноеЗначение.ПодчиненныйЭлемент;
		 //	НаселенныйПунктДетально.Улица.Идентификатор = ВыбранноеЗначение.Идентификатор;
		 //КонецЕсли;
		 Элементы.ТаблицаДанных.ТекущиеДанные.АдресКонтрагента = ВыбранноеЗначение.Представление;
		 ИдентификаторУлицы = ВыбранноеЗначение.Идентификатор;
	 Иначе
		 // Иной источник, будет попытка разобрать.
		 ИдентификаторУлицы = Неопределено;
		 Элементы.ТаблицаДанных.ТекущиеДанные.АдресКонтрагента = Строка(ВыбранноеЗначение);
	 КонецЕсли;
	 
	 Элемент.ОбновитьТекстРедактирования();
	 
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ТаблицаДанныхАдресКонтрагентаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	 
	 
	 ДанныеВыбора = Новый СписокЗначений;
	 Если Ожидание = 0 Тогда
		 // Формирование списка быстрого выбора, стандартную обработку не надо трогать.
		 Возврат;
	 КонецЕсли;
	 
	 //Элементы.Улица.ЦветФона = АвтоЦвет;
	 
	 //d13945a8-7017-46ab-b1e6-ede1e89317ad //Барнаул
	 ИдентификаторНаселенногоПункта = Новый УникальныйИдентификатор("d13945a8-7017-46ab-b1e6-ede1e89317ad");
	 Если СтрДлина(Текст) < 3 Или Не ЗначениеЗаполнено(ИдентификаторНаселенногоПункта)Тогда 
		 // Нет вариантов, список пуст, стандартную обработку не надо трогать.
		 Возврат;
	 КонецЕсли;
	 
	 ДополнительныеПараметры = Новый Структура;
	 ДополнительныеПараметры.Вставить("ФорматАдреса", "ФИАС");
	 ДополнительныеПараметры.Вставить("СкрыватьНеактуальные",              Истина);
	 
	 ДанныеКлассификатора = СписокАвтоподбораУлицы(ИдентификаторНаселенногоПункта, Текст, ДополнительныеПараметры);
	 ПроверитьДоступностьКлассификатора();
	 Если ДанныеКлассификатора.Отказ Тогда
		 Возврат;
	 КонецЕсли;
	 
	 ДанныеВыбора = ДанныеКлассификатора.Данные;
	 
	 // Стандартную обработку отключаем, только если есть наши варианты.
	 Если ДанныеВыбора.Количество() > 0 Тогда
		 СтандартнаяОбработка = Ложь;
	 КонецЕсли;
	 
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ТаблицаДанныхАдресКонтрагентаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	 
	 Модифицированность = Истина;
	 
	 ДанныеВыбора = Новый СписокЗначений;
	 ДанныеВыбора.Добавить(Текст);
	 Элементы.ТаблицаДанных.ТекущиеДанные.АдресКонтрагента = Текст;
	 
	 
 КонецПроцедуры
 
 
 &НаКлиенте
 Процедура ПроверитьДоступностьКлассификатора()
	 
	 Задание = ПроверитьДоступностьКлассификатораВФоне(УникальныйИдентификатор);
	 
	 НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	 НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
	 НастройкиОжидания.ПолучатьРезультат = Истина;
	 
	 Обработчик = Новый ОписаниеОповещения("ПослеПроверкиДоступностиКлассификатораВФоне", ЭтотОбъект);
	 ДлительныеОперацииКлиент.ОжидатьЗавершение(Задание, Обработчик, НастройкиОжидания);
 КонецПроцедуры
 
 &НаСервереБезКонтекста
 Функция ПроверитьДоступностьКлассификатораВФоне(Знач УникальныйИдентификатор)
	 ИмяМетода = "УправлениеКонтактнойИнформациейСлужебный.ПроверитьДоступностьКлассификатора";
	 
	 НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	 НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка доступности сервиса адресного классификатора'");
	 
	 Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, Новый Структура, НастройкиЗапуска);
 КонецФункции
 
 &НаКлиенте
 Процедура ПослеПроверкиДоступностиКлассификатораВФоне(Задание, ДополнительныеПараметры) Экспорт
	 ТекстСообщенияСервиса = "";
	 Если Задание.Статус = "Выполнено" Тогда
		 ДоступностьКлассификатора = ПолучитьИзВременногоХранилища(Задание.АдресРезультата);
		 Если ДоступностьКлассификатора <> Неопределено Тогда
			 Если ДоступностьКлассификатора.Отказ Тогда
				 ТекстСообщенияСервиса = НСтр("ru = 'Автоподбор и проверка адреса недоступны:'") + Символы.ПС 
				 + ДоступностьКлассификатора.КраткоеПредставлениеОшибки;
			 КонецЕсли;
		 КонецЕсли;
	 ИначеЕсли Задание.Статус = "Ошибка" Тогда
		 ТекстСообщенияСервиса = НСтр("ru = 'Автоподбор и проверка адреса недоступны:'") + Символы.ПС 
		 + Задание.КраткоеПредставлениеОшибки;
	 КонецЕсли;
	 Если ЗначениеЗаполнено(ТекстСообщенияСервиса) Тогда 
		 Сообщить(ТекстСообщенияСервиса);	
	 КонецЕсли;
	 
 КонецПроцедуры
 
 &НаСервереБезКонтекста
 Функция СписокАвтоподбораУлицы(ИдентификаторНаселенногоПункта, Текст, ДополнительныеПараметры)
	 
	 Возврат УправлениеКонтактнойИнформациейСлужебный.СписокАвтоподбораУлицы(ИдентификаторНаселенногоПункта, Текст, ДополнительныеПараметры);
	 
 КонецФункции
 
 &НаКлиенте
 Процедура ПересчитатьОтходы(Команда)
	 
	 ТекСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
	 
	 МассивСтрокОтходов = Объект.ТаблицаОтходов.НайтиСтроки(Новый Структура("НомерСтрокиИнтерфейса", ТекСтрока.НомерСтрокиИнтерфейса));
	 
	 МассивДляПроверки = новый Массив();
	 Для каждого Строка Из МассивСтрокОтходов Цикл
		 МассивДляПроверки.Добавить(Строка.Номенклатура);
	 КонецЦикла;
	 
	 ПроверкаОтходов = ПроверитьНоменклатуру(МассивДляПроверки);
	 
	 Если ПроверкаОтходов И МассивСтрокОтходов.Количество() = 1 Тогда
		 
		 Строка = МассивСтрокОтходов[0];
		 
		 ПолучитьСтрокиКоэффициентовРаспределения(Строка.Номенклатура, ТекСтрока.ДоговорКонтрагента);
		 Если КоэффициентыРаспределения.Количество() > 0 Тогда 
			 ТекСтрока.ФлагИзменений = Истина;
			 
			 Объект.ТаблицаОтходов.Удалить(Строка); 			
			 МассивДанныхКолонки = новый Массив();
			 Для каждого СтрокаК Из КоэффициентыРаспределения Цикл
				 МассивДанныхКолонки.Добавить(СтрокаК.ВесВПроценте);
			 КонецЦикла;
			 
			 МассивРаспределенияКоличества = ОбменССайтом.РаспределитьПропорционально(Строка.Количество, МассивДанныхКолонки);
			 //МассивРаспределенияКоэфициентаНаФорме = ОбменССайтом.РаспределитьПропорционально(Строка.Коэффициент, МассивДанныхКолонки);
			 МассивРаспределенияОбъема = ОбменССайтом.РаспределитьПропорционально(Строка.Объем, МассивДанныхКолонки);
			 
			 
			 Индекс = 0;
			 Для каждого СтрокаТабличнойЧасти Из КоэффициентыРаспределения Цикл
				 НоваяСтрока = Объект.ТаблицаОтходов.Добавить();
				 НоваяСтрока.Номенклатура = СтрокаТабличнойЧасти.НоменклатураДляРаспределения;
				 НоваяСтрока.Количество = МассивРаспределенияКоличества[Индекс];
				 НоваяСтрока.ЕдиницаИзмерения = Строка.ЕдиницаИзмерения;
				 НоваяСтрока.НомерСтрокиИнтерфейса = ТекСтрока.НомерСтрокиИнтерфейса;
				 НоваяСтрока.Коэффициент = Строка.Коэффициент;
				 НоваяСтрока.Объем = МассивРаспределенияОбъема[Индекс];
				 НоваяСтрока.НомерСтрокиОтходы = Индекс + 1;
				 
				 Индекс = Индекс + 1;
				 
			 КонецЦикла;
		 КонецЕсли;
		 
	 ИначеЕсли ПроверкаОтходов И МассивСтрокОтходов.Количество() > 1 Тогда
		 
		 ТекСтрока.ФлагИзменений = Истина;
		 
		 ИтогКоличество = 0;
		 ИтогКоэффициент = 0;
		 ИтогОбъем= 0;
		 СписокНоменклатурыДляРаспределения = новый Массив();
		 
		 Для каждого Строка Из МассивСтрокОтходов Цикл
			 ИтогКоличество = ИтогКоличество + Строка.Количество;
			 ИтогКоэффициент = Строка.Коэффициент;
			 //ИтогКоэффициент = ИтогКоэффициент + Строка.Коэффициент;
			 ИтогОбъем = ИтогОбъем + Строка.Объем;
			 НомерСтрокиИнтерфейса = Строка.НомерСтрокиИнтерфейса;
			 ЕдиницаИзмерения = Строка.ЕдиницаИзмерения;
			 СписокНоменклатурыДляРаспределения.Добавить(Строка.Номенклатура);
			 Объект.ТаблицаОтходов.Удалить(Строка); 
		 КонецЦикла; 
		 
		 БазоваяНоменклатура = ПолучитьНоменклатуруБазовую(СписокНоменклатурыДляРаспределения, ТекСтрока.ДоговорКонтрагента);
		 
		 НоваяСтрока = Объект.ТаблицаОтходов.Добавить();
		 НоваяСтрока.Номенклатура = БазоваяНоменклатура;
		 НоваяСтрока.Количество = ИтогКоличество;
		 НоваяСтрока.ЕдиницаИзмерения = ЕдиницаИзмерения;
		 НоваяСтрока.НомерСтрокиИнтерфейса = НомерСтрокиИнтерфейса;
		 НоваяСтрока.Коэффициент = ИтогКоэффициент;
		 НоваяСтрока.Объем = ИтогОбъем;
		 НоваяСтрока.НомерСтрокиОтходы = 1;
		 
		 
	 КонецЕсли;
	 
 КонецПроцедуры
 
 
 &НаСервере
 Процедура  ПолучитьСтрокиКоэффициентовРаспределения(Номенклатура, ДоговорКонтрагента)
	 
	 КоэффициентыРаспределения.Очистить();
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	СКоПКоэфиициентыРаспределения.ДополнительныйПризнак,
	 |	СКоПКоэфиициентыРаспределения.ДоговорКонтрагента,
	 |	СКоПКоэфиициентыРаспределения.НоменклатураБазовая,
	 |	СКоПКоэфиициентыРаспределения.НоменклатураДляРаспределения,
	 |	СКоПКоэфиициентыРаспределения.Количество,
	 |	СКоПКоэфиициентыРаспределения.ВесВПроценте,
	 |	СКоПКоэфиициентыРаспределения.Комментарий
	 |ИЗ
	 |	РегистрСведений.СКоПКоэфиициентыРаспределения КАК СКоПКоэфиициентыРаспределения
	 |ГДЕ
	 |	СКоПКоэфиициентыРаспределения.ДоговорКонтрагента = &ДоговорКонтрагента
	 |	И СКоПКоэфиициентыРаспределения.НоменклатураБазовая = &Номенклатура";
	 
	 Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	 Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	 
	 РезультатЗапроса = Запрос.Выполнить();
	 
	 ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	 
	 Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
		 Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			 НоваяСтрока = КоэффициентыРаспределения.Добавить();
			 ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаДетальныеЗаписи); 
		 КонецЦикла;
	 Иначе
		 
		 ЗапросБезДоговора = Новый Запрос;
		 ЗапросБезДоговора.Текст = 
		 "ВЫБРАТЬ
		 |	СКоПКоэфиициентыРаспределения.ДополнительныйПризнак,
		 |	СКоПКоэфиициентыРаспределения.ДоговорКонтрагента,
		 |	СКоПКоэфиициентыРаспределения.НоменклатураБазовая,
		 |	СКоПКоэфиициентыРаспределения.НоменклатураДляРаспределения,
		 |	СКоПКоэфиициентыРаспределения.Количество,
		 |	СКоПКоэфиициентыРаспределения.ВесВПроценте,
		 |	СКоПКоэфиициентыРаспределения.Комментарий
		 |ИЗ
		 |	РегистрСведений.СКоПКоэфиициентыРаспределения КАК СКоПКоэфиициентыРаспределения
		 |ГДЕ
		 |	СКоПКоэфиициентыРаспределения.ДоговорКонтрагента = &ДоговорКонтрагента
		 | И	СКоПКоэфиициентыРаспределения.НоменклатураБазовая = &Номенклатура";
		 
		 ЗапросБезДоговора.УстановитьПараметр("Номенклатура", Номенклатура);
		 ЗапросБезДоговора.УстановитьПараметр("ДоговорКонтрагента", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		 
		 РезультатЗапросаБезДоговора = ЗапросБезДоговора.Выполнить();
		 
		 ВыборкаДетальныеЗаписиБезДоговора = РезультатЗапросаБезДоговора.Выбрать();
		 
		 Пока ВыборкаДетальныеЗаписиБезДоговора.Следующий() Цикл
			 НоваяСтрока = КоэффициентыРаспределения.Добавить();
			 ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписиБезДоговора); 
		 КонецЦикла;
		 
		 
	 КонецЕсли;
	 
 КонецПроцедуры
 
 &НаСервере
 Функция  ПолучитьНоменклатуруБазовую(СписокНоменклатурыДляРаспределения, ДоговорКонтрагента)
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	СКоПКоэфиициентыРаспределения.НоменклатураБазовая КАК НоменклатураБазовая
	 |ИЗ
	 |	РегистрСведений.СКоПКоэфиициентыРаспределения КАК СКоПКоэфиициентыРаспределения
	 |ГДЕ
	 |	СКоПКоэфиициентыРаспределения.НоменклатураДляРаспределения В(&СписокНоменклатурыДляРаспределения)
	 |	И СКоПКоэфиициентыРаспределения.ДоговорКонтрагента = &ДоговорКонтрагента
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	СКоПКоэфиициентыРаспределения.НоменклатураБазовая";
	 
	 Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	 Запрос.УстановитьПараметр("СписокНоменклатурыДляРаспределения", СписокНоменклатурыДляРаспределения);
	 
	 РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	 
	 Если РезультатЗапроса.Количество() > 0 Тогда
		 Возврат РезультатЗапроса[0].НоменклатураБазовая;
	 Иначе
		 
		 ЗапросБезДоговора = Новый Запрос;
		 ЗапросБезДоговора.Текст = 
		 "ВЫБРАТЬ
		 |	СКоПКоэфиициентыРаспределения.НоменклатураБазовая КАК НоменклатураБазовая
		 |ИЗ
		 |	РегистрСведений.СКоПКоэфиициентыРаспределения КАК СКоПКоэфиициентыРаспределения
		 |ГДЕ
		 |	СКоПКоэфиициентыРаспределения.НоменклатураДляРаспределения В(&СписокНоменклатурыДляРаспределения)
		 |	И СКоПКоэфиициентыРаспределения.ДоговорКонтрагента = &ДоговорКонтрагента
		 |
		 |СГРУППИРОВАТЬ ПО
		 |	СКоПКоэфиициентыРаспределения.НоменклатураБазовая";
		 
		 ЗапросБезДоговора.УстановитьПараметр("ДоговорКонтрагента", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		 ЗапросБезДоговора.УстановитьПараметр("СписокНоменклатурыДляРаспределения", СписокНоменклатурыДляРаспределения);
		 
		 РезультатЗапросаБезДоговора = ЗапросБезДоговора.Выполнить().Выгрузить();
		 
		 Если РезультатЗапросаБезДоговора.Количество() > 0 Тогда
			 Возврат РезультатЗапросаБезДоговора[0].НоменклатураБазовая;
		 Иначе
			 Возврат Справочники.Номенклатура.ПустаяСсылка();
		 КонецЕсли;
		 
	 КонецЕсли;
	 
 КонецФункции
 
 &НаСервере
 Функция  ПроверитьНоменклатуру(МассивСтрокОтходов)
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	СКоПКоэфиициентыРаспределения.НоменклатураБазовая,
	 |	СКоПКоэфиициентыРаспределения.НоменклатураДляРаспределения
	 |ИЗ
	 |	РегистрСведений.СКоПКоэфиициентыРаспределения КАК СКоПКоэфиициентыРаспределения";
	 
	 РегистрРаспределения = Запрос.Выполнить().Выгрузить();
	 
	 ПроверкаНомБазовая = Истина;
	 ПроверкаНомДляРаспределения = Истина;

	 Для каждого Номенклатура Из МассивСтрокОтходов Цикл
		 
		 Отбор = Новый Структура;
		 Отбор.Вставить("НоменклатураБазовая", Номенклатура);
		 Строки = РегистрРаспределения.НайтиСтроки(Отбор);
		 Если Не Строки.Количество() > 0 Тогда
			 ПроверкаНомБазовая = Ложь;
		 КонецЕсли;
		 
	 КонецЦикла;
	 
	 Для каждого Номенклатура Из МассивСтрокОтходов Цикл
		 
		 Отбор = Новый Структура;
		 Отбор.Вставить("НоменклатураДляРаспределения", Номенклатура);
		 Строки = РегистрРаспределения.НайтиСтроки(Отбор);
		 Если Не Строки.Количество() > 0 Тогда
			 ПроверкаНомДляРаспределения = Ложь;
		 КонецЕсли;
		 
	 КонецЦикла;

	 Если ПроверкаНомДляРаспределения или ПроверкаНомБазовая Тогда 
		 Возврат Истина;
	 Иначе
		 Возврат Ложь;
	 КонецЕсли;
	 
	 
 КонецФункции

 &НаКлиенте
 Процедура ЗаполнитьПоПредыдущейСтроке(Команда)
	 
	 ДанныеПредыдущейСтроки = Объект.ТаблицаДанных.НайтиПоИдентификатору(ЭтаФорма.Элементы.ТаблицаДанных.ТекущаяСтрока-1); 
	 НомерСтрокиИнтерфейса = ЭтаФорма.Элементы.ТаблицаДанных.ТекущиеДанные.НомерСтрокиИнтерфейса; 
	 ЗаполнитьЗначенияСвойств(ЭтаФорма.Элементы.ТаблицаДанных.ТекущиеДанные, ДанныеПредыдущейСтроки);	 
	 ЭтаФорма.Элементы.ТаблицаДанных.ТекущиеДанные.НомерСтрокиИнтерфейса = НомерСтрокиИнтерфейса;	 
	 
	 ТекСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
	 Если ТекСтрока.Автомашина <> мТекАвтомашинаТаблицы Тогда
		 УдалитьДанные();
	 КонецЕсли;
	 
	 Если ТекСтрока.Автомашина = ПредопределенноеЗначение("Справочник.ргАвтомашины.Чужие") или 
		 Строка(ТекСтрока.Автомашина) = "ЧУЖОЙ (ТЕРМИНАЛ)" Тогда
		 ТекСтрока.ВидОперацииНаПолигоне = ПредопределенноеЗначение("Перечисление.ргВидыОперацийНаПолигоне.ПриемЗаНаличку");
		 ОперацииПриИзмененииВидаОперации();
	 КонецЕсли;
	 
	 // Заполнение водителя
	 СтруктураДанных	= ргМодульВывозМусораСервер.ПолучитьДанныеАвтомашины(ТекСтрока.Автомашина, ТекСтрока.ДатаЗаезда);
	 
	 ТекСтрока.Водитель				= СтруктураДанных.Водитель;
	 ТекСтрока.ГосударственныйНомер	= СтруктураДанных.ГосударственныйНомер;
	 
	 Если ЗначениеЗаполнено(СтруктураДанных.НоменклатураОтходов) Тогда
		 
		 ТекСтрокаОтходов = Элементы.ТаблицаОтходов.ТекущиеДанные;
		 Если ТекСтрокаОтходов <> Неопределено Тогда
			 
			 ТекСтрокаОтходов.Номенклатура		= СтруктураДанных.НоменклатураОтходов;
			 ТекСтрокаОтходов.Количество			= 1;
			 ТекСтрокаОтходов.ЕдиницаИзмерения	= СтруктураДанных.ЕдиницаОтходов;
			 ТекСтрокаОтходов.Коэффициент		= СтруктураДанных.КоэффициентОтходов;
			 ТекСтрокаОтходов.Объем				= ТекСтрокаОтходов.Количество * ТекСтрокаОтходов.Коэффициент;
			 
			 ОбновитьИтогПоОбъемуСтрокиТаблицыДанных(ТекСтрока);
			 
		 КонецЕсли;
		 
	 КонецЕсли;
	 
	 ЭтаФорма.ТекущийЭлемент = Элементы.ТаблицаДанныхГосударственныйНомер;

	 
 КонецПроцедуры

 &НаКлиенте
 Процедура ТаблицаОтходовНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	 
	 СтандартнаяОбработка = Ложь;
	 	 
	 ВыборПоДоговору = ПолучитьЗначениеДопРеквизита(Элементы.ТаблицаДанных.ТекущиеДанные.ДоговорКонтрагента, "Выбор по договору (Договоры)");
	 Если ВыборПоДоговору Тогда
		ПараметрыВыбораДляНом = ОтборПоНоменклатуреДоговора();
	 Иначе
		ПараметрыВыбораДляНом = ОтборПоНоменклатуреПоРодителю();
	 КонецЕсли;

	 ОткрытьФорму("ВнешняяОбработка.ргРабочееМестоДиспетчераПолигона.Форма.ФормаВыбораНоменклатуры",ПараметрыВыбораДляНом,Элемент);
	 
 КонецПроцедуры

&НаКлиенте
 Процедура ПолучитьВесДо(Команда)
	 Взвесить("ВесДо", 11);
 КонецПроцедуры

&НаКлиенте
 Процедура ПолучитьВесПосле(Команда)
	 Взвесить("ВесПосле", 14);
 КонецПроцедуры

&НаКлиенте
Процедура Взвесить(Реквизит, Порт)
	ОчиститьСообщения();
	
	ТекСтр = Элементы.ТаблицаДанных.ТекущиеДанные;	

	Если ТекСтр=Неопределено Тогда 
		Message("Выделете строку");
        Возврат;
	КонецЕсли;
	
	Вес = ПолучитьВес3(Порт);
	
	Если Вес = 0 Тогда
		//Сообщить("Нулевой вес с весов!");
		Возврат;
	КонецЕсли;
	Вес = Окр(Вес/1000,3);
	
	ТекСтр[Реквизит] = Вес;
	ТекСтр.ФлагИзменений = Истина;
	
	ВесАвто = ПолучитьВесАвто(ТекСтр.Автомашина);
	ВесАвто = Окр(ВесАвто/1000,3);
	
	Если ВесАвто <> 0 И Реквизит = "ВесДо" Тогда
		ТекСтр.ВесПосле = ВесАвто;
		ТекСтр.ВесПоВесам = ТекСтр.ВесДо - ТекСтр.ВесПосле;
	КонецЕсли;
	
	Если Реквизит="ВесПосле" или ЗначениеЗаполнено(ТекСтр.ВесПосле) тогда
		ТекСтр.ВесПоВесам = ТекСтр.ВесДо - ТекСтр.ВесПосле;
		
		ТекСтр.ВесНетто = ТекСтр.ВесПоВесам*1000;
		
		ТД = Элементы.ТаблицаОтходов.ТекущиеДанные;
		Если ТД<>Неопределено Тогда 
			ТД.Количество		= ТекСтр.ВесПоВесам;
			//ТД.Коэффициент = ПолучитьКПоВесам(ТД.Номенклатура, ТД.Коэффициент);
			ТД.Коэффициент = 1;
			ТД.Объем			= ТД.Количество * ПолучитьКПоВесам(ТД.Номенклатура, ТД.Коэффициент);
		КонецЕсли;
	КонецЕсли;
			

КонецПроцедуры

Функция ПолучитьВесАвто(Машина)
	Возврат Машина.МассаБезНагрузки; 
КонецФункции
   
&НаСервере
Функция ПолучитьКПоВесам(Номенклатура_, К_) Экспорт 
	
	Если Не Номенклатура_.ЕдиницаИзмерения.Код = "168" Тогда 
		Возврат К_;		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеСведения.Значение
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Объект = &Объект
		|	И ДополнительныеСведения.Свойство.Наименование ПОДОБНО &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", "КоэффициентДляВесов"+"%");
	Запрос.УстановитьПараметр("Объект", Номенклатура_);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Значение;
	КонецЦикла;
	
	Возврат К_;		
	
КонецФункции



&НаКлиенте
Функция ПолучитьВес(Порт)
													  //Ci2001A
	try
		scale = Новый COMObject("CAScentre_DLL_AllScale.GetWeight");
		
	except
		Message("Ошибка драйвера! Обратитесь к программистам!");
		Возврат 0;
	endtry;
		
		try
			b = scale.ConnectRS(Порт, 9600, 0 );
		except  
			Сообщить("Ошибка соеденения! Обратитесь к программистам!");
			Возврат 0;         
		endtry;

		
		
		  а= 0;
	try
			а=scale.Update();         
		except
			// Первая попытка не удалась, пробуем ещё раз!             
			try
				а=scale.Update();      
			except
				// Вторая попытка не удалась, пробуем ещё раз!
				try
				а=	scale.Update();      
				except
				endtry;
			endtry;
		endtry;
		
		
	try
		scale.Disconnect();
	except
		Message("Ошибка отключения! Обратитесь к программистам!");
	endtry;

	
	Попытка
	а= Число(СтрЗаменить(Формат(а,"ЧРД=,; ЧН=0; ЧВН=; ЧГ=0"),",","."));
Исключение
	Message("Ошибка преобразования к числу -"+а+"! Обратитесь к программистам!");
	а = 0;
КонецПопытки;

Возврат а;
	
КонецФункции

&НаКлиенте
Функция ПолучитьВес2(Порт)
													  //Ci2001A
	try
		//scale = Новый COMObject("CAScentre_DLL_AllScale.GetWeight");
		scale = Новый COMObject("Ci2001A.Indic");
		
	except
		Message("Ошибка драйвера! Обратитесь к программистам!");
		Возврат 0;
	endtry;
		
		try
			//b = scale.ConnectRS(Порт, 9600, 0 );
			scale.NumberOfCom = Порт;
			scale.Open();
		except  
			Сообщить("Ошибка соеденения! Обратитесь к программистам!"+ОписаниеОшибки());
			Возврат 0;         
		endtry;

		
		
		  а= 0;
	try
			scale.Update();         
		except
			// Первая попытка не удалась, пробуем ещё раз!             
			Сообщить("Ошибка!");

		endtry;
		
		
	try
		scale.Close();
	except
		Message("Ошибка отключения! Обратитесь к программистам!");
	endtry;

	
	Попытка
	а= Число(СтрЗаменить(Формат(а,"ЧРД=,; ЧН=0; ЧВН=; ЧГ=0"),",","."));
Исключение
	Message("Ошибка преобразования к числу -"+а+"! Обратитесь к программистам!");
	а = 0;
КонецПопытки;

Возврат а;
	
КонецФункции

&НаКлиенте
Функция ПолучитьВес3(Порт, сообщать=Истина)
	//Ci2001A
	
	Если Порт=14 Тогда 
		МойОбъект = ДрайверВыезд;
		Индикатор = ИндикаторВыезд;
	Иначе
		МойОбъект = ДрайверВыезд2;
		Индикатор = ИндикаторВыезд2;
	КонецЕсли;
	
	
	РезультатПоследнейОперации = МойОбъект.GetInfo(Индикатор);
	//Вес = МойОбъект.GetWeight(Индикатор, 32);
	
	Если Порт=11 тогда
		ID = 32;
	ИначеЕсли Порт=14 тогда
		ID = 32;
	КонецЕсли;
	
		
	Вес = МойОбъект.GetWeight(Индикатор,ID);
	
	Если Порт=14 Тогда
		
	иначе 
		//РезультатПоследнейОперации = МойОбъект.GetInfo(Индикатор);
		//РезультатОперации = МойОбъект.ClosePort(Индикатор);
		//РезультатПоследнейОперации = МойОбъект.GetInfo(Индикатор);
	КонецЕсли;	
	
	Попытка
		а= Число(СтрЗаменить(Формат(Вес,"ЧРД=,; ЧН=0; ЧВН=; ЧГ=0"),",","."));
		Если сообщать Тогда 
			Сообщить("ВЕС ПОЛУЧЕН!"+Вес);
		КонецЕсли;
	Исключение
		Если сообщать Тогда 
			Message("Ошибка преобразования к числу -"+Вес+"! Обратитесь к программистам!");
		КонецЕсли;
		а = 0;
	КонецПопытки;
	
	Возврат а;
	
КонецФункции

&НаКлиенте
Процедура СохранитьПредварительно(Команда)
	// Вставить содержимое обработчика.
	Отказ = Ложь;
	 СохранитьДанныеПредварительно(, Отказ);
	 Если Не Отказ Тогда 
		 ДобавитьНовуюСтроку();
		 ДобавитьНовуюСтрокуОтходов();
	 КонецЕсли;	
	
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказатьСтроки(Команда)
		
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВесДо_НаВыезде(Команда)
	// Вставить содержимое обработчика.
	 Взвесить("ВесДо", 14);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПосле_НаВьезде(Команда)
	// Вставить содержимое обработчика.
	 Взвесить("ВесПосле", 11);
КонецПроцедуры


 
